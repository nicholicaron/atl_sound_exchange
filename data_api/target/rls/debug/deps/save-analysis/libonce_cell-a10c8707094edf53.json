{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0","program":"/home/c/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","once_cell","--edition=2021","/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"race\"","--cfg","feature=\"std\"","-C","metadata=a10c8707094edf53","-C","extra-filename=-a10c8707094edf53","--out-dir","/home/c/dev/rust/atl_sound_exchange/data_api/target/rls/debug/deps","-L","dependency=/home/c/dev/rust/atl_sound_exchange/data_api/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/c/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/c/dev/rust/atl_sound_exchange/data_api/target/rls/debug/deps/libonce_cell-a10c8707094edf53.rmeta"},"prelude":{"crate_id":{"name":"once_cell","disambiguator":[931030702291071872,0]},"crate_root":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src","external_crates":[{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[3488764316664526318,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[8055937789589085173,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9266852701449989672,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[3150474620658042907,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7885665867006586706,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[12703856752884015026,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[2969720598907790989,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[2619625876091296344,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[12464395834502290914,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6756473508419496664,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[15198303206847108385,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[2772378233732002785,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[12984264205291464654,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[17906896803061581552,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[6255416831383744366,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[17027395046702333165,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[17940528507109169175,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[16282955217049922585,0]}},{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[15640776750749541284,0]}}],"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":0,"byte_end":45187,"line_start":1,"line_end":1368,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":386},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":64228,"byte_end":64235,"line_start":175,"line_end":175,"column_start":25,"column_end":32},"alias_span":null,"name":"OnceBox","value":"","parent":{"krate":0,"index":327}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":0,"byte_end":45187,"line_start":1,"line_end":1368,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":97},{"krate":0,"index":212},{"krate":0,"index":327},{"krate":0,"index":414}],"decl_id":null,"docs":" # Overview","sig":null,"attributes":[{"value":"/ # Overview","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":0,"byte_end":14,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15,"byte_end":18,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ `once_cell` provides two new cell-like types, [`unsync::OnceCell`] and [`sync::OnceCell`]. A `OnceCell`","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":19,"byte_end":126,"line_start":3,"line_end":3,"column_start":1,"column_end":108}},{"value":"/ might store arbitrary non-`Copy` types, can be assigned to at most once and provides direct access","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":127,"byte_end":229,"line_start":4,"line_end":4,"column_start":1,"column_end":103}},{"value":"/ to the stored contents. The core API looks *roughly* like this (and there's much more inside, read on!):","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":230,"byte_end":338,"line_start":5,"line_end":5,"column_start":1,"column_end":109}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":339,"byte_end":342,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":343,"byte_end":361,"line_start":7,"line_end":7,"column_start":1,"column_end":19}},{"value":"/ impl<T> OnceCell<T> {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":362,"byte_end":387,"line_start":8,"line_end":8,"column_start":1,"column_end":26}},{"value":"/     const fn new() -> OnceCell<T> { ... }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":388,"byte_end":433,"line_start":9,"line_end":9,"column_start":1,"column_end":46}},{"value":"/     fn set(&self, value: T) -> Result<(), T> { ... }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":434,"byte_end":490,"line_start":10,"line_end":10,"column_start":1,"column_end":57}},{"value":"/     fn get(&self) -> Option<&T> { ... }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":491,"byte_end":534,"line_start":11,"line_end":11,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":535,"byte_end":540,"line_start":12,"line_end":12,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":541,"byte_end":548,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":549,"byte_end":552,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Note that, like with [`RefCell`] and [`Mutex`], the `set` method requires only a shared reference.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":553,"byte_end":655,"line_start":15,"line_end":15,"column_start":1,"column_end":103}},{"value":"/ Because of the single assignment restriction `get` can return a `&T` instead of `Ref<T>`","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":656,"byte_end":748,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/ or `MutexGuard<T>`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":749,"byte_end":772,"line_start":17,"line_end":17,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":773,"byte_end":776,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The `sync` flavor is thread-safe (that is, implements the [`Sync`] trait), while the `unsync` one is not.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":777,"byte_end":886,"line_start":19,"line_end":19,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":887,"byte_end":890,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ [`unsync::OnceCell`]: unsync/struct.OnceCell.html","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":891,"byte_end":944,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/ [`sync::OnceCell`]: sync/struct.OnceCell.html","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":945,"byte_end":994,"line_start":22,"line_end":22,"column_start":1,"column_end":50}},{"value":"/ [`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":995,"byte_end":1066,"line_start":23,"line_end":23,"column_start":1,"column_end":72}},{"value":"/ [`Mutex`]: https://doc.rust-lang.org/std/sync/struct.Mutex.html","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1067,"byte_end":1134,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ [`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1135,"byte_end":1201,"line_start":25,"line_end":25,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1202,"byte_end":1205,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Recipes","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1206,"byte_end":1219,"line_start":27,"line_end":27,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1220,"byte_end":1223,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ `OnceCell` might be useful for a variety of patterns.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1224,"byte_end":1281,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1282,"byte_end":1285,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ## Safe Initialization of Global Data","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1286,"byte_end":1327,"line_start":31,"line_end":31,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1328,"byte_end":1331,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1332,"byte_end":1343,"line_start":33,"line_end":33,"column_start":1,"column_end":12}},{"value":"/ use std::{env, io};","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1344,"byte_end":1367,"line_start":34,"line_end":34,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1368,"byte_end":1371,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1372,"byte_end":1406,"line_start":36,"line_end":36,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1407,"byte_end":1410,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug)]","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1411,"byte_end":1431,"line_start":38,"line_end":38,"column_start":1,"column_end":21}},{"value":"/ pub struct Logger {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1432,"byte_end":1455,"line_start":39,"line_end":39,"column_start":1,"column_end":24}},{"value":"/     // ...","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1456,"byte_end":1470,"line_start":40,"line_end":40,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1471,"byte_end":1476,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ static INSTANCE: OnceCell<Logger> = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1477,"byte_end":1533,"line_start":42,"line_end":42,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1534,"byte_end":1537,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ impl Logger {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1538,"byte_end":1555,"line_start":44,"line_end":44,"column_start":1,"column_end":18}},{"value":"/     pub fn global() -> &'static Logger {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1556,"byte_end":1600,"line_start":45,"line_end":45,"column_start":1,"column_end":45}},{"value":"/         INSTANCE.get().expect(\"logger is not initialized\")","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1601,"byte_end":1663,"line_start":46,"line_end":46,"column_start":1,"column_end":63}},{"value":"/     }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1664,"byte_end":1673,"line_start":47,"line_end":47,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1674,"byte_end":1677,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     fn from_cli(args: env::Args) -> Result<Logger, std::io::Error> {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1678,"byte_end":1750,"line_start":49,"line_end":49,"column_start":1,"column_end":73}},{"value":"/        // ...","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1751,"byte_end":1768,"line_start":50,"line_end":50,"column_start":1,"column_end":18}},{"value":"/ #      Ok(Logger {})","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1769,"byte_end":1793,"line_start":51,"line_end":51,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1794,"byte_end":1803,"line_start":52,"line_end":52,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1804,"byte_end":1809,"line_start":53,"line_end":53,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1810,"byte_end":1813,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1814,"byte_end":1829,"line_start":55,"line_end":55,"column_start":1,"column_end":16}},{"value":"/     let logger = Logger::from_cli(env::args()).unwrap();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1830,"byte_end":1890,"line_start":56,"line_end":56,"column_start":1,"column_end":61}},{"value":"/     INSTANCE.set(logger).unwrap();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1891,"byte_end":1929,"line_start":57,"line_end":57,"column_start":1,"column_end":39}},{"value":"/     // use `Logger::global()` from now on","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1930,"byte_end":1975,"line_start":58,"line_end":58,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1976,"byte_end":1981,"line_start":59,"line_end":59,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1982,"byte_end":1989,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1990,"byte_end":1993,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## Lazy Initialized Global Data","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":1994,"byte_end":2029,"line_start":62,"line_end":62,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2030,"byte_end":2033,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This is essentially the `lazy_static!` macro, but without a macro.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2034,"byte_end":2104,"line_start":64,"line_end":64,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2105,"byte_end":2108,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2109,"byte_end":2120,"line_start":66,"line_end":66,"column_start":1,"column_end":12}},{"value":"/ use std::{sync::Mutex, collections::HashMap};","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2121,"byte_end":2170,"line_start":67,"line_end":67,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2171,"byte_end":2174,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2175,"byte_end":2209,"line_start":69,"line_end":69,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2210,"byte_end":2213,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ fn global_data() -> &'static Mutex<HashMap<i32, String>> {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2214,"byte_end":2276,"line_start":71,"line_end":71,"column_start":1,"column_end":63}},{"value":"/     static INSTANCE: OnceCell<Mutex<HashMap<i32, String>>> = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2277,"byte_end":2358,"line_start":72,"line_end":72,"column_start":1,"column_end":82}},{"value":"/     INSTANCE.get_or_init(|| {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2359,"byte_end":2392,"line_start":73,"line_end":73,"column_start":1,"column_end":34}},{"value":"/         let mut m = HashMap::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2393,"byte_end":2432,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/         m.insert(13, \"Spica\".to_string());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2433,"byte_end":2479,"line_start":75,"line_end":75,"column_start":1,"column_end":47}},{"value":"/         m.insert(74, \"Hoyten\".to_string());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2480,"byte_end":2527,"line_start":76,"line_end":76,"column_start":1,"column_end":48}},{"value":"/         Mutex::new(m)","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2528,"byte_end":2553,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/     })","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2554,"byte_end":2564,"line_start":78,"line_end":78,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2565,"byte_end":2570,"line_start":79,"line_end":79,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2571,"byte_end":2578,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2579,"byte_end":2582,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ There are also the [`sync::Lazy`] and [`unsync::Lazy`] convenience types to streamline this pattern:","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2583,"byte_end":2687,"line_start":82,"line_end":82,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2688,"byte_end":2691,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2692,"byte_end":2703,"line_start":84,"line_end":84,"column_start":1,"column_end":12}},{"value":"/ use std::{sync::Mutex, collections::HashMap};","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2704,"byte_end":2753,"line_start":85,"line_end":85,"column_start":1,"column_end":50}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2754,"byte_end":2784,"line_start":86,"line_end":86,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2785,"byte_end":2788,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ static GLOBAL_DATA: Lazy<Mutex<HashMap<i32, String>>> = Lazy::new(|| {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2789,"byte_end":2863,"line_start":88,"line_end":88,"column_start":1,"column_end":75}},{"value":"/     let mut m = HashMap::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2864,"byte_end":2899,"line_start":89,"line_end":89,"column_start":1,"column_end":36}},{"value":"/     m.insert(13, \"Spica\".to_string());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2900,"byte_end":2942,"line_start":90,"line_end":90,"column_start":1,"column_end":43}},{"value":"/     m.insert(74, \"Hoyten\".to_string());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2943,"byte_end":2986,"line_start":91,"line_end":91,"column_start":1,"column_end":44}},{"value":"/     Mutex::new(m)","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":2987,"byte_end":3008,"line_start":92,"line_end":92,"column_start":1,"column_end":22}},{"value":"/ });","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3009,"byte_end":3016,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3017,"byte_end":3020,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3021,"byte_end":3036,"line_start":95,"line_end":95,"column_start":1,"column_end":16}},{"value":"/     println!(\"{:?}\", GLOBAL_DATA.lock().unwrap());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3037,"byte_end":3091,"line_start":96,"line_end":96,"column_start":1,"column_end":55}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3092,"byte_end":3097,"line_start":97,"line_end":97,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3098,"byte_end":3105,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3106,"byte_end":3109,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ Note that the variable that holds `Lazy` is declared as `static`, *not*","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3110,"byte_end":3185,"line_start":100,"line_end":100,"column_start":1,"column_end":76}},{"value":"/ `const`. This is important: using `const` instead compiles, but works wrong.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3186,"byte_end":3266,"line_start":101,"line_end":101,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3267,"byte_end":3270,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ [`sync::Lazy`]: sync/struct.Lazy.html","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3271,"byte_end":3312,"line_start":103,"line_end":103,"column_start":1,"column_end":42}},{"value":"/ [`unsync::Lazy`]: unsync/struct.Lazy.html","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3313,"byte_end":3358,"line_start":104,"line_end":104,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3359,"byte_end":3362,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ ## General purpose lazy evaluation","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3363,"byte_end":3401,"line_start":106,"line_end":106,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3402,"byte_end":3405,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ Unlike `lazy_static!`, `Lazy` works with local variables.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3406,"byte_end":3467,"line_start":108,"line_end":108,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3468,"byte_end":3471,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3472,"byte_end":3483,"line_start":110,"line_end":110,"column_start":1,"column_end":12}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3484,"byte_end":3516,"line_start":111,"line_end":111,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3517,"byte_end":3520,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3521,"byte_end":3536,"line_start":113,"line_end":113,"column_start":1,"column_end":16}},{"value":"/     let ctx = vec![1, 2, 3];","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3537,"byte_end":3569,"line_start":114,"line_end":114,"column_start":1,"column_end":33}},{"value":"/     let thunk = Lazy::new(|| {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3570,"byte_end":3604,"line_start":115,"line_end":115,"column_start":1,"column_end":35}},{"value":"/         ctx.iter().sum::<i32>()","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3605,"byte_end":3640,"line_start":116,"line_end":116,"column_start":1,"column_end":36}},{"value":"/     });","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3641,"byte_end":3652,"line_start":117,"line_end":117,"column_start":1,"column_end":12}},{"value":"/     assert_eq!(*thunk, 6);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3653,"byte_end":3683,"line_start":118,"line_end":118,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3684,"byte_end":3689,"line_start":119,"line_end":119,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3690,"byte_end":3697,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3698,"byte_end":3701,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ If you need a lazy field in a struct, you probably should use `OnceCell`","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3702,"byte_end":3778,"line_start":122,"line_end":122,"column_start":1,"column_end":77}},{"value":"/ directly, because that will allow you to access `self` during initialization.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3779,"byte_end":3860,"line_start":123,"line_end":123,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3861,"byte_end":3864,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3865,"byte_end":3876,"line_start":125,"line_end":125,"column_start":1,"column_end":12}},{"value":"/ use std::{fs, path::PathBuf};","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3877,"byte_end":3910,"line_start":126,"line_end":126,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3911,"byte_end":3914,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3915,"byte_end":3951,"line_start":128,"line_end":128,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3952,"byte_end":3955,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ struct Ctx {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3956,"byte_end":3972,"line_start":130,"line_end":130,"column_start":1,"column_end":17}},{"value":"/     config_path: PathBuf,","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":3973,"byte_end":4002,"line_start":131,"line_end":131,"column_start":1,"column_end":30}},{"value":"/     config: OnceCell<String>,","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4003,"byte_end":4036,"line_start":132,"line_end":132,"column_start":1,"column_end":34}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4037,"byte_end":4042,"line_start":133,"line_end":133,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4043,"byte_end":4046,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ impl Ctx {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4047,"byte_end":4061,"line_start":135,"line_end":135,"column_start":1,"column_end":15}},{"value":"/     pub fn get_config(&self) -> Result<&str, std::io::Error> {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4062,"byte_end":4128,"line_start":136,"line_end":136,"column_start":1,"column_end":67}},{"value":"/         let cfg = self.config.get_or_try_init(|| {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4129,"byte_end":4183,"line_start":137,"line_end":137,"column_start":1,"column_end":55}},{"value":"/             fs::read_to_string(&self.config_path)","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4184,"byte_end":4237,"line_start":138,"line_end":138,"column_start":1,"column_end":54}},{"value":"/         })?;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4238,"byte_end":4254,"line_start":139,"line_end":139,"column_start":1,"column_end":17}},{"value":"/         Ok(cfg.as_str())","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4255,"byte_end":4283,"line_start":140,"line_end":140,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4284,"byte_end":4293,"line_start":141,"line_end":141,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4294,"byte_end":4299,"line_start":142,"line_end":142,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4300,"byte_end":4307,"line_start":143,"line_end":143,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4308,"byte_end":4311,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ ## Lazily Compiled Regex","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4312,"byte_end":4340,"line_start":145,"line_end":145,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4341,"byte_end":4344,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ This is a `regex!` macro which takes a string literal and returns an","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4345,"byte_end":4417,"line_start":147,"line_end":147,"column_start":1,"column_end":73}},{"value":"/ *expression* that evaluates to a `&'static Regex`:","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4418,"byte_end":4472,"line_start":148,"line_end":148,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4473,"byte_end":4476,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4477,"byte_end":4484,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ macro_rules! regex {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4485,"byte_end":4509,"line_start":151,"line_end":151,"column_start":1,"column_end":25}},{"value":"/     ($re:literal $(,)?) => {{","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4510,"byte_end":4543,"line_start":152,"line_end":152,"column_start":1,"column_end":34}},{"value":"/         static RE: once_cell::sync::OnceCell<regex::Regex> = once_cell::sync::OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4544,"byte_end":4642,"line_start":153,"line_end":153,"column_start":1,"column_end":99}},{"value":"/         RE.get_or_init(|| regex::Regex::new($re).unwrap())","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4643,"byte_end":4705,"line_start":154,"line_end":154,"column_start":1,"column_end":63}},{"value":"/     }};","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4706,"byte_end":4717,"line_start":155,"line_end":155,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4718,"byte_end":4723,"line_start":156,"line_end":156,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4724,"byte_end":4731,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4732,"byte_end":4735,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ This macro can be useful to avoid the \"compile regex on every loop iteration\" problem.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4736,"byte_end":4826,"line_start":159,"line_end":159,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4827,"byte_end":4830,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ ## Runtime `include_bytes!`","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4831,"byte_end":4862,"line_start":161,"line_end":161,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4863,"byte_end":4866,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ The `include_bytes` macro is useful to include test resources, but it slows","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4867,"byte_end":4946,"line_start":163,"line_end":163,"column_start":1,"column_end":80}},{"value":"/ down test compilation a lot. An alternative is to load the resources at","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":4947,"byte_end":5022,"line_start":164,"line_end":164,"column_start":1,"column_end":76}},{"value":"/ runtime:","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5023,"byte_end":5035,"line_start":165,"line_end":165,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5036,"byte_end":5039,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5040,"byte_end":5047,"line_start":167,"line_end":167,"column_start":1,"column_end":8}},{"value":"/ use std::path::Path;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5048,"byte_end":5072,"line_start":168,"line_end":168,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5073,"byte_end":5076,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5077,"byte_end":5111,"line_start":170,"line_end":170,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5112,"byte_end":5115,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ pub struct TestResource {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5116,"byte_end":5145,"line_start":172,"line_end":172,"column_start":1,"column_end":30}},{"value":"/     path: &'static str,","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5146,"byte_end":5173,"line_start":173,"line_end":173,"column_start":1,"column_end":28}},{"value":"/     cell: OnceCell<Vec<u8>>,","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5174,"byte_end":5206,"line_start":174,"line_end":174,"column_start":1,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5207,"byte_end":5212,"line_start":175,"line_end":175,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5213,"byte_end":5216,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ impl TestResource {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5217,"byte_end":5240,"line_start":177,"line_end":177,"column_start":1,"column_end":24}},{"value":"/     pub const fn new(path: &'static str) -> TestResource {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5241,"byte_end":5303,"line_start":178,"line_end":178,"column_start":1,"column_end":63}},{"value":"/         TestResource { path, cell: OnceCell::new() }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5304,"byte_end":5360,"line_start":179,"line_end":179,"column_start":1,"column_end":57}},{"value":"/     }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5361,"byte_end":5370,"line_start":180,"line_end":180,"column_start":1,"column_end":10}},{"value":"/     pub fn bytes(&self) -> &[u8] {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5371,"byte_end":5409,"line_start":181,"line_end":181,"column_start":1,"column_end":39}},{"value":"/         self.cell.get_or_init(|| {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5410,"byte_end":5448,"line_start":182,"line_end":182,"column_start":1,"column_end":39}},{"value":"/             let dir = std::env::var(\"CARGO_MANIFEST_DIR\").unwrap();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5449,"byte_end":5520,"line_start":183,"line_end":183,"column_start":1,"column_end":72}},{"value":"/             let path = Path::new(dir.as_str()).join(self.path);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5521,"byte_end":5588,"line_start":184,"line_end":184,"column_start":1,"column_end":68}},{"value":"/             std::fs::read(&path).unwrap_or_else(|_err| {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5589,"byte_end":5649,"line_start":185,"line_end":185,"column_start":1,"column_end":61}},{"value":"/                 panic!(\"failed to load test resource: {}\", path.display())","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5650,"byte_end":5728,"line_start":186,"line_end":186,"column_start":1,"column_end":79}},{"value":"/             })","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5729,"byte_end":5747,"line_start":187,"line_end":187,"column_start":1,"column_end":19}},{"value":"/         }).as_slice()","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5748,"byte_end":5773,"line_start":188,"line_end":188,"column_start":1,"column_end":26}},{"value":"/     }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5774,"byte_end":5783,"line_start":189,"line_end":189,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5784,"byte_end":5789,"line_start":190,"line_end":190,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5790,"byte_end":5793,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ static TEST_IMAGE: TestResource = TestResource::new(\"test_data/lena.png\");","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5794,"byte_end":5872,"line_start":192,"line_end":192,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5873,"byte_end":5876,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ #[test]","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5877,"byte_end":5888,"line_start":194,"line_end":194,"column_start":1,"column_end":12}},{"value":"/ fn test_sobel_filter() {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5889,"byte_end":5917,"line_start":195,"line_end":195,"column_start":1,"column_end":29}},{"value":"/     let rgb: &[u8] = TEST_IMAGE.bytes();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5918,"byte_end":5962,"line_start":196,"line_end":196,"column_start":1,"column_end":45}},{"value":"/     // ...","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5963,"byte_end":5977,"line_start":197,"line_end":197,"column_start":1,"column_end":15}},{"value":"/ # drop(rgb);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5978,"byte_end":5994,"line_start":198,"line_end":198,"column_start":1,"column_end":17}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":5995,"byte_end":6000,"line_start":199,"line_end":199,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6001,"byte_end":6008,"line_start":200,"line_end":200,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6009,"byte_end":6012,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ ## `lateinit`","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6013,"byte_end":6030,"line_start":202,"line_end":202,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6031,"byte_end":6034,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ `LateInit` type for delayed initialization. It is reminiscent of Kotlin's","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6035,"byte_end":6112,"line_start":204,"line_end":204,"column_start":1,"column_end":78}},{"value":"/ `lateinit` keyword and allows construction of cyclic data structures:","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6113,"byte_end":6186,"line_start":205,"line_end":205,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6187,"byte_end":6190,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6191,"byte_end":6194,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6195,"byte_end":6202,"line_start":208,"line_end":208,"column_start":1,"column_end":8}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6203,"byte_end":6237,"line_start":209,"line_end":209,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6238,"byte_end":6241,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug)]","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6242,"byte_end":6262,"line_start":211,"line_end":211,"column_start":1,"column_end":21}},{"value":"/ pub struct LateInit<T> { cell: OnceCell<T> }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6263,"byte_end":6311,"line_start":212,"line_end":212,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6312,"byte_end":6315,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ impl<T> LateInit<T> {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6316,"byte_end":6341,"line_start":214,"line_end":214,"column_start":1,"column_end":26}},{"value":"/     pub fn init(&self, value: T) {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6342,"byte_end":6380,"line_start":215,"line_end":215,"column_start":1,"column_end":39}},{"value":"/         assert!(self.cell.set(value).is_ok())","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6381,"byte_end":6430,"line_start":216,"line_end":216,"column_start":1,"column_end":50}},{"value":"/     }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6431,"byte_end":6440,"line_start":217,"line_end":217,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6441,"byte_end":6446,"line_start":218,"line_end":218,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6447,"byte_end":6450,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ impl<T> Default for LateInit<T> {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6451,"byte_end":6488,"line_start":220,"line_end":220,"column_start":1,"column_end":38}},{"value":"/     fn default() -> Self { LateInit { cell: OnceCell::default() } }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6489,"byte_end":6560,"line_start":221,"line_end":221,"column_start":1,"column_end":72}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6561,"byte_end":6566,"line_start":222,"line_end":222,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6567,"byte_end":6570,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ impl<T> std::ops::Deref for LateInit<T> {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6571,"byte_end":6616,"line_start":224,"line_end":224,"column_start":1,"column_end":46}},{"value":"/     type Target = T;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6617,"byte_end":6641,"line_start":225,"line_end":225,"column_start":1,"column_end":25}},{"value":"/     fn deref(&self) -> &T {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6642,"byte_end":6673,"line_start":226,"line_end":226,"column_start":1,"column_end":32}},{"value":"/         self.cell.get().unwrap()","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6674,"byte_end":6710,"line_start":227,"line_end":227,"column_start":1,"column_end":37}},{"value":"/     }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6711,"byte_end":6720,"line_start":228,"line_end":228,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6721,"byte_end":6726,"line_start":229,"line_end":229,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6727,"byte_end":6730,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ #[derive(Default, Debug)]","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6731,"byte_end":6760,"line_start":231,"line_end":231,"column_start":1,"column_end":30}},{"value":"/ struct A<'a> {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6761,"byte_end":6779,"line_start":232,"line_end":232,"column_start":1,"column_end":19}},{"value":"/     b: LateInit<&'a B<'a>>,","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6780,"byte_end":6811,"line_start":233,"line_end":233,"column_start":1,"column_end":32}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6812,"byte_end":6817,"line_start":234,"line_end":234,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6818,"byte_end":6821,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ #[derive(Default, Debug)]","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6822,"byte_end":6851,"line_start":236,"line_end":236,"column_start":1,"column_end":30}},{"value":"/ struct B<'a> {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6852,"byte_end":6870,"line_start":237,"line_end":237,"column_start":1,"column_end":19}},{"value":"/     a: LateInit<&'a A<'a>>","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6871,"byte_end":6901,"line_start":238,"line_end":238,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6902,"byte_end":6907,"line_start":239,"line_end":239,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6908,"byte_end":6911,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ fn build_cycle() {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6912,"byte_end":6934,"line_start":241,"line_end":241,"column_start":1,"column_end":23}},{"value":"/     let a = A::default();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6935,"byte_end":6964,"line_start":242,"line_end":242,"column_start":1,"column_end":30}},{"value":"/     let b = B::default();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6965,"byte_end":6994,"line_start":243,"line_end":243,"column_start":1,"column_end":30}},{"value":"/     a.b.init(&b);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":6995,"byte_end":7016,"line_start":244,"line_end":244,"column_start":1,"column_end":22}},{"value":"/     b.a.init(&a);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7017,"byte_end":7038,"line_start":245,"line_end":245,"column_start":1,"column_end":22}},{"value":"/     println!(\"{:?}\", a.b.a.b.a);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7039,"byte_end":7075,"line_start":246,"line_end":246,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7076,"byte_end":7081,"line_start":247,"line_end":247,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7082,"byte_end":7089,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7090,"byte_end":7093,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ # Comparison with std","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7094,"byte_end":7119,"line_start":250,"line_end":250,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7120,"byte_end":7123,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ |`!Sync` types         | Access Mode            | Drawbacks                                     |","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7124,"byte_end":7225,"line_start":252,"line_end":252,"column_start":1,"column_end":102}},{"value":"/ |----------------------|------------------------|-----------------------------------------------|","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7226,"byte_end":7327,"line_start":253,"line_end":253,"column_start":1,"column_end":102}},{"value":"/ |`Cell<T>`             | `T`                    | requires `T: Copy` for `get`                  |","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7328,"byte_end":7429,"line_start":254,"line_end":254,"column_start":1,"column_end":102}},{"value":"/ |`RefCell<T>`          | `RefMut<T>` / `Ref<T>` | may panic at runtime                          |","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7430,"byte_end":7531,"line_start":255,"line_end":255,"column_start":1,"column_end":102}},{"value":"/ |`unsync::OnceCell<T>` | `&T`                   | assignable only once                          |","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7532,"byte_end":7633,"line_start":256,"line_end":256,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7634,"byte_end":7637,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ |`Sync` types          | Access Mode            | Drawbacks                                     |","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7638,"byte_end":7739,"line_start":258,"line_end":258,"column_start":1,"column_end":102}},{"value":"/ |----------------------|------------------------|-----------------------------------------------|","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7740,"byte_end":7841,"line_start":259,"line_end":259,"column_start":1,"column_end":102}},{"value":"/ |`AtomicT`             | `T`                    | works only with certain `Copy` types          |","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7842,"byte_end":7943,"line_start":260,"line_end":260,"column_start":1,"column_end":102}},{"value":"/ |`Mutex<T>`            | `MutexGuard<T>`        | may deadlock at runtime, may block the thread |","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":7944,"byte_end":8045,"line_start":261,"line_end":261,"column_start":1,"column_end":102}},{"value":"/ |`sync::OnceCell<T>`   | `&T`                   | assignable only once, may block the thread    |","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8046,"byte_end":8147,"line_start":262,"line_end":262,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8148,"byte_end":8151,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ Technically, calling `get_or_init` will also cause a panic or a deadlock if it recursively calls","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8152,"byte_end":8252,"line_start":264,"line_end":264,"column_start":1,"column_end":101}},{"value":"/ itself. However, because the assignment can happen only once, such cases should be more rare than","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8253,"byte_end":8354,"line_start":265,"line_end":265,"column_start":1,"column_end":102}},{"value":"/ equivalents with `RefCell` and `Mutex`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8355,"byte_end":8398,"line_start":266,"line_end":266,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8399,"byte_end":8402,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ # Minimum Supported `rustc` Version","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8403,"byte_end":8442,"line_start":268,"line_end":268,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8443,"byte_end":8446,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ This crate's minimum supported `rustc` version is `1.56.0`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8447,"byte_end":8510,"line_start":270,"line_end":270,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8511,"byte_end":8514,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ If only the `std` feature is enabled, MSRV will be updated conservatively.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8515,"byte_end":8593,"line_start":272,"line_end":272,"column_start":1,"column_end":79}},{"value":"/ When using other features, like `parking_lot`, MSRV might be updated more frequently, up to the latest stable.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8594,"byte_end":8708,"line_start":273,"line_end":273,"column_start":1,"column_end":115}},{"value":"/ In both cases, increasing MSRV is *not* considered a semver-breaking change.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8709,"byte_end":8789,"line_start":274,"line_end":274,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8790,"byte_end":8793,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ # Implementation details","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8794,"byte_end":8822,"line_start":276,"line_end":276,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8823,"byte_end":8826,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ The implementation is based on the [`lazy_static`](https://github.com/rust-lang-nursery/lazy-static.rs/)","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8827,"byte_end":8935,"line_start":278,"line_end":278,"column_start":1,"column_end":109}},{"value":"/ and [`lazy_cell`](https://github.com/indiv0/lazycell/) crates and [`std::sync::Once`]. In some sense,","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":8936,"byte_end":9041,"line_start":279,"line_end":279,"column_start":1,"column_end":106}},{"value":"/ `once_cell` just streamlines and unifies those APIs.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9042,"byte_end":9098,"line_start":280,"line_end":280,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9099,"byte_end":9102,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ To implement a sync flavor of `OnceCell`, this crates uses either a custom","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9103,"byte_end":9181,"line_start":282,"line_end":282,"column_start":1,"column_end":79}},{"value":"/ re-implementation of `std::sync::Once` or `parking_lot::Mutex`. This is","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9182,"byte_end":9257,"line_start":283,"line_end":283,"column_start":1,"column_end":76}},{"value":"/ controlled by the `parking_lot` feature (disabled by default). Performance","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9258,"byte_end":9336,"line_start":284,"line_end":284,"column_start":1,"column_end":79}},{"value":"/ is the same for both cases, but the `parking_lot` based `OnceCell<T>` is","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9337,"byte_end":9413,"line_start":285,"line_end":285,"column_start":1,"column_end":77}},{"value":"/ smaller by up to 16 bytes.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9414,"byte_end":9444,"line_start":286,"line_end":286,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9445,"byte_end":9448,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ This crate uses `unsafe`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9449,"byte_end":9478,"line_start":288,"line_end":288,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9479,"byte_end":9482,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ [`std::sync::Once`]: https://doc.rust-lang.org/std/sync/struct.Once.html","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9483,"byte_end":9559,"line_start":290,"line_end":290,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9560,"byte_end":9563,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ # F.A.Q.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9564,"byte_end":9576,"line_start":292,"line_end":292,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9577,"byte_end":9580,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ **Should I use lazy_static or once_cell?**","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9581,"byte_end":9627,"line_start":294,"line_end":294,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9628,"byte_end":9631,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ To the first approximation, `once_cell` is both more flexible and more convenient than `lazy_static`","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9632,"byte_end":9736,"line_start":296,"line_end":296,"column_start":1,"column_end":105}},{"value":"/ and should be preferred.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9737,"byte_end":9765,"line_start":297,"line_end":297,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9766,"byte_end":9769,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ Unlike `once_cell`, `lazy_static` supports spinlock-based implementation of blocking which works with","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9770,"byte_end":9875,"line_start":299,"line_end":299,"column_start":1,"column_end":106}},{"value":"/ `#![no_std]`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9876,"byte_end":9893,"line_start":300,"line_end":300,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9894,"byte_end":9897,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ `lazy_static` has received significantly more real world testing, but `once_cell` is also a widely","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":9898,"byte_end":10000,"line_start":302,"line_end":302,"column_start":1,"column_end":103}},{"value":"/ used crate.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10001,"byte_end":10016,"line_start":303,"line_end":303,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10017,"byte_end":10020,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ **Should I use the sync or unsync flavor?**","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10021,"byte_end":10068,"line_start":305,"line_end":305,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10069,"byte_end":10072,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ Because Rust compiler checks thread safety for you, it's impossible to accidentally use `unsync` where","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10073,"byte_end":10179,"line_start":307,"line_end":307,"column_start":1,"column_end":107}},{"value":"/ `sync` is required. So, use `unsync` in single-threaded code and `sync` in multi-threaded. It's easy","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10180,"byte_end":10284,"line_start":308,"line_end":308,"column_start":1,"column_end":105}},{"value":"/ to switch between the two if code becomes multi-threaded later.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10285,"byte_end":10352,"line_start":309,"line_end":309,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10353,"byte_end":10356,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ At the moment, `unsync` has an additional benefit that reentrant initialization causes a panic, which","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10357,"byte_end":10462,"line_start":311,"line_end":311,"column_start":1,"column_end":106}},{"value":"/ might be easier to debug than a deadlock.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10463,"byte_end":10508,"line_start":312,"line_end":312,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10509,"byte_end":10512,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ **Does this crate support async?**","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10513,"byte_end":10551,"line_start":314,"line_end":314,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10552,"byte_end":10555,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ No, but you can use [`async_once_cell`](https://crates.io/crates/async_once_cell) instead.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10556,"byte_end":10650,"line_start":316,"line_end":316,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10651,"byte_end":10654,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ # Related crates","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10655,"byte_end":10675,"line_start":318,"line_end":318,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10676,"byte_end":10679,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ * [double-checked-cell](https://github.com/niklasf/double-checked-cell)","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10680,"byte_end":10755,"line_start":320,"line_end":320,"column_start":1,"column_end":76}},{"value":"/ * [lazy-init](https://crates.io/crates/lazy-init)","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10756,"byte_end":10809,"line_start":321,"line_end":321,"column_start":1,"column_end":54}},{"value":"/ * [lazycell](https://crates.io/crates/lazycell)","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10810,"byte_end":10861,"line_start":322,"line_end":322,"column_start":1,"column_end":52}},{"value":"/ * [mitochondria](https://crates.io/crates/mitochondria)","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10862,"byte_end":10921,"line_start":323,"line_end":323,"column_start":1,"column_end":60}},{"value":"/ * [lazy_static](https://crates.io/crates/lazy_static)","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10922,"byte_end":10979,"line_start":324,"line_end":324,"column_start":1,"column_end":58}},{"value":"/ * [async_once_cell](https://crates.io/crates/async_once_cell)","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":10980,"byte_end":11045,"line_start":325,"line_end":325,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":11046,"byte_end":11049,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ Most of this crate's functionality is available in `std` in nightly Rust.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":11050,"byte_end":11127,"line_start":327,"line_end":327,"column_start":1,"column_end":78}},{"value":"/ See the [tracking issue](https://github.com/rust-lang/rust/issues/74465).","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":11128,"byte_end":11205,"line_start":328,"line_end":328,"column_start":1,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":97},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":11531,"byte_end":11537,"line_start":346,"line_end":346,"column_start":9,"column_end":15},"name":"unsync","qualname":"::unsync","value":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":146},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":154},{"krate":0,"index":171},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":183},{"krate":0,"index":190},{"krate":0,"index":199},{"krate":0,"index":204},{"krate":0,"index":209}],"decl_id":null,"docs":" Single-threaded version of `OnceCell`.\n","sig":null,"attributes":[{"value":"/ Single-threaded version of `OnceCell`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":11480,"byte_end":11522,"line_start":345,"line_end":345,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":129},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12365,"byte_end":12373,"line_start":374,"line_end":374,"column_start":16,"column_end":24},"name":"OnceCell","qualname":"::unsync::OnceCell","value":"OnceCell {  }","parent":null,"children":[{"krate":0,"index":131}],"decl_id":null,"docs":" A cell which can be written to only once. It is not thread safe.","sig":null,"attributes":[{"value":"/ A cell which can be written to only once. It is not thread safe.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":11702,"byte_end":11770,"line_start":354,"line_end":354,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":11775,"byte_end":11778,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ Unlike [`std::cell::RefCell`], a `OnceCell` provides simple `&`","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":11783,"byte_end":11850,"line_start":356,"line_end":356,"column_start":5,"column_end":72}},{"value":"/ references to the contents.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":11855,"byte_end":11886,"line_start":357,"line_end":357,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":11891,"byte_end":11894,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ [`std::cell::RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":11899,"byte_end":11981,"line_start":359,"line_end":359,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":11986,"byte_end":11989,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":11994,"byte_end":12007,"line_start":361,"line_end":361,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12012,"byte_end":12019,"line_start":362,"line_end":362,"column_start":5,"column_end":12}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12024,"byte_end":12060,"line_start":363,"line_end":363,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12065,"byte_end":12068,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12073,"byte_end":12104,"line_start":365,"line_end":365,"column_start":5,"column_end":36}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12109,"byte_end":12143,"line_start":366,"line_end":366,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12148,"byte_end":12151,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ let value: &String = cell.get_or_init(|| {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12156,"byte_end":12202,"line_start":368,"line_end":368,"column_start":5,"column_end":51}},{"value":"/     \"Hello, World!\".to_string()","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12207,"byte_end":12242,"line_start":369,"line_end":369,"column_start":5,"column_end":40}},{"value":"/ });","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12247,"byte_end":12254,"line_start":370,"line_end":370,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, \"Hello, World!\");","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12259,"byte_end":12298,"line_start":371,"line_end":371,"column_start":5,"column_end":44}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12303,"byte_end":12337,"line_start":372,"line_end":372,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12342,"byte_end":12349,"line_start":373,"line_end":373,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12871,"byte_end":12878,"line_start":387,"line_end":387,"column_start":12,"column_end":19},"name":"default","qualname":"<OnceCell<T> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12996,"byte_end":12999,"line_start":393,"line_end":393,"column_start":12,"column_end":15},"name":"fmt","qualname":"<OnceCell<T> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10286},"children":[],"decl_id":{"krate":2,"index":10287},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":13293,"byte_end":13298,"line_start":402,"line_end":402,"column_start":12,"column_end":17},"name":"clone","qualname":"<OnceCell<T> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> OnceCell<T>","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":13499,"byte_end":13509,"line_start":409,"line_end":409,"column_start":12,"column_end":22},"name":"clone_from","qualname":"<OnceCell<T> as std::clone::Clone>::clone_from","value":"fn clone_from<'_, '_>(&'_ mut Self, &'_ Self)","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2884},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":13798,"byte_end":13800,"line_start":418,"line_end":418,"column_start":12,"column_end":14},"name":"eq","qualname":"<OnceCell<T> as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ Self) -> bool","parent":{"krate":2,"index":2915},"children":[],"decl_id":{"krate":2,"index":2917},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":13975,"byte_end":13979,"line_start":426,"line_end":426,"column_start":12,"column_end":16},"name":"from","qualname":"<OnceCell<T> as std::convert::From>::from","value":"fn from(T) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14142,"byte_end":14145,"line_start":433,"line_end":433,"column_start":22,"column_end":25},"name":"new","qualname":"<OnceCell<T>>::new","value":"const fn new() -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14091,"byte_end":14120,"line_start":432,"line_end":432,"column_start":9,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14295,"byte_end":14305,"line_start":438,"line_end":438,"column_start":22,"column_end":32},"name":"with_value","qualname":"<OnceCell<T>>::with_value","value":"const fn with_value(T) -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new initialized cell.\n","sig":null,"attributes":[{"value":"/ Creates a new initialized cell.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14238,"byte_end":14273,"line_start":437,"line_end":437,"column_start":9,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14535,"byte_end":14538,"line_start":445,"line_end":445,"column_start":16,"column_end":19},"name":"get","qualname":"<OnceCell<T>>::get","value":"fn get<'_>(&'_ Self) -> Option<&'_ T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying value.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14413,"byte_end":14458,"line_start":442,"line_end":442,"column_start":9,"column_end":54}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14467,"byte_end":14470,"line_start":443,"line_end":443,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14479,"byte_end":14519,"line_start":444,"line_end":444,"column_start":9,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15354,"byte_end":15361,"line_start":466,"line_end":466,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<OnceCell<T>>::get_mut","value":"fn get_mut<'_>(&'_ mut Self) -> Option<&'_ mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying value.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14679,"byte_end":14732,"line_start":450,"line_end":450,"column_start":9,"column_end":62}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14741,"byte_end":14744,"line_start":451,"line_end":451,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14753,"byte_end":14793,"line_start":452,"line_end":452,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14802,"byte_end":14805,"line_start":453,"line_end":453,"column_start":9,"column_end":12}},{"value":"/ This method is allowed to violate the invariant of writing to a `OnceCell`","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14814,"byte_end":14892,"line_start":454,"line_end":454,"column_start":9,"column_end":87}},{"value":"/ at most once because it requires `&mut` access to `self`. As with all","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14901,"byte_end":14974,"line_start":455,"line_end":455,"column_start":9,"column_end":82}},{"value":"/ interior mutability, `&mut` access permits arbitrary modification:","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14983,"byte_end":15053,"line_start":456,"line_end":456,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15062,"byte_end":15065,"line_start":457,"line_end":457,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15074,"byte_end":15081,"line_start":458,"line_end":458,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15090,"byte_end":15126,"line_start":459,"line_end":459,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15135,"byte_end":15138,"line_start":460,"line_end":460,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<u32> = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15147,"byte_end":15197,"line_start":461,"line_end":461,"column_start":9,"column_end":59}},{"value":"/ cell.set(92).unwrap();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15206,"byte_end":15232,"line_start":462,"line_end":462,"column_start":9,"column_end":35}},{"value":"/ *cell.get_mut().unwrap() = 93;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15241,"byte_end":15275,"line_start":463,"line_end":463,"column_start":9,"column_end":43}},{"value":"/ assert_eq!(cell.get(), Some(&93));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15284,"byte_end":15322,"line_start":464,"line_end":464,"column_start":9,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15331,"byte_end":15338,"line_start":465,"line_end":465,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16053,"byte_end":16056,"line_start":488,"line_end":488,"column_start":16,"column_end":19},"name":"set","qualname":"<OnceCell<T>>::set","value":"fn set<'_>(&'_ Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15517,"byte_end":15563,"line_start":471,"line_end":471,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15572,"byte_end":15575,"line_start":472,"line_end":472,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15584,"byte_end":15653,"line_start":473,"line_end":473,"column_start":9,"column_end":78}},{"value":"/ full.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15662,"byte_end":15671,"line_start":474,"line_end":474,"column_start":9,"column_end":18}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15680,"byte_end":15683,"line_start":475,"line_end":475,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15692,"byte_end":15705,"line_start":476,"line_end":476,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15714,"byte_end":15721,"line_start":477,"line_end":477,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15730,"byte_end":15766,"line_start":478,"line_end":478,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15775,"byte_end":15778,"line_start":479,"line_end":479,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15787,"byte_end":15818,"line_start":480,"line_end":480,"column_start":9,"column_end":40}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15827,"byte_end":15861,"line_start":481,"line_end":481,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15870,"byte_end":15873,"line_start":482,"line_end":482,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(cell.set(92), Ok(()));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15882,"byte_end":15919,"line_start":483,"line_end":483,"column_start":9,"column_end":46}},{"value":"/ assert_eq!(cell.set(62), Err(62));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15928,"byte_end":15966,"line_start":484,"line_end":484,"column_start":9,"column_end":47}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15975,"byte_end":15978,"line_start":485,"line_end":485,"column_start":9,"column_end":12}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":15987,"byte_end":16021,"line_start":486,"line_end":486,"column_start":9,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16030,"byte_end":16037,"line_start":487,"line_end":487,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16735,"byte_end":16745,"line_start":509,"line_end":509,"column_start":16,"column_end":26},"name":"try_insert","qualname":"<OnceCell<T>>::try_insert","value":"fn try_insert<'_>(&'_ Self, T) -> Result<&'_ T, (&'_ T, T)>","parent":null,"children":[],"decl_id":null,"docs":" Like [`set`](Self::set), but also returns a reference to the final cell value.","sig":null,"attributes":[{"value":"/ Like [`set`](Self::set), but also returns a reference to the final cell value.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16249,"byte_end":16331,"line_start":495,"line_end":495,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16340,"byte_end":16343,"line_start":496,"line_end":496,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16352,"byte_end":16365,"line_start":497,"line_end":497,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16374,"byte_end":16381,"line_start":498,"line_end":498,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16390,"byte_end":16426,"line_start":499,"line_end":499,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16435,"byte_end":16438,"line_start":500,"line_end":500,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16447,"byte_end":16478,"line_start":501,"line_end":501,"column_start":9,"column_end":40}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16487,"byte_end":16521,"line_start":502,"line_end":502,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16530,"byte_end":16533,"line_start":503,"line_end":503,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(cell.try_insert(92), Ok(&92));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16542,"byte_end":16587,"line_start":504,"line_end":504,"column_start":9,"column_end":54}},{"value":"/ assert_eq!(cell.try_insert(62), Err((&92, 62)));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16596,"byte_end":16648,"line_start":505,"line_end":505,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16657,"byte_end":16660,"line_start":506,"line_end":506,"column_start":9,"column_end":12}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16669,"byte_end":16703,"line_start":507,"line_end":507,"column_start":9,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":16712,"byte_end":16719,"line_start":508,"line_end":508,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18143,"byte_end":18154,"line_start":546,"line_end":546,"column_start":16,"column_end":27},"name":"get_or_init","qualname":"<OnceCell<T>>::get_or_init","value":"fn get_or_init<F, '_>(&'_ Self, F) -> &'_ T where F: FnOnce() -> T","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f`\n if the cell was empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f`","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17404,"byte_end":17463,"line_start":525,"line_end":525,"column_start":9,"column_end":68}},{"value":"/ if the cell was empty.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17472,"byte_end":17498,"line_start":526,"line_end":526,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17507,"byte_end":17510,"line_start":527,"line_end":527,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17519,"byte_end":17531,"line_start":528,"line_end":528,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17540,"byte_end":17543,"line_start":529,"line_end":529,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17552,"byte_end":17622,"line_start":530,"line_end":530,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17631,"byte_end":17657,"line_start":531,"line_end":531,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17666,"byte_end":17669,"line_start":532,"line_end":532,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. Doing","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17678,"byte_end":17747,"line_start":533,"line_end":533,"column_start":9,"column_end":78}},{"value":"/ so results in a panic.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17756,"byte_end":17782,"line_start":534,"line_end":534,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17791,"byte_end":17794,"line_start":535,"line_end":535,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17803,"byte_end":17816,"line_start":536,"line_end":536,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17825,"byte_end":17832,"line_start":537,"line_end":537,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17841,"byte_end":17877,"line_start":538,"line_end":538,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17886,"byte_end":17889,"line_start":539,"line_end":539,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17898,"byte_end":17929,"line_start":540,"line_end":540,"column_start":9,"column_end":40}},{"value":"/ let value = cell.get_or_init(|| 92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17938,"byte_end":17978,"line_start":541,"line_end":541,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":17987,"byte_end":18014,"line_start":542,"line_end":542,"column_start":9,"column_end":36}},{"value":"/ let value = cell.get_or_init(|| unreachable!());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18023,"byte_end":18075,"line_start":543,"line_end":543,"column_start":9,"column_end":61}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18084,"byte_end":18111,"line_start":544,"line_end":544,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18120,"byte_end":18127,"line_start":545,"line_end":545,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":19362,"byte_end":19377,"line_start":582,"line_end":582,"column_start":16,"column_end":31},"name":"get_or_try_init","qualname":"<OnceCell<T>>::get_or_try_init","value":"fn get_or_try_init<F, E, '_>(&'_ Self, F) -> Result<&'_ T, E> where\nF: FnOnce() -> Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18429,"byte_end":18491,"line_start":557,"line_end":557,"column_start":9,"column_end":71}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18500,"byte_end":18564,"line_start":558,"line_end":558,"column_start":9,"column_end":73}},{"value":"/ error is returned.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18573,"byte_end":18595,"line_start":559,"line_end":559,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18604,"byte_end":18607,"line_start":560,"line_end":560,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18616,"byte_end":18628,"line_start":561,"line_end":561,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18637,"byte_end":18640,"line_start":562,"line_end":562,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18649,"byte_end":18719,"line_start":563,"line_end":563,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18728,"byte_end":18754,"line_start":564,"line_end":564,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18763,"byte_end":18766,"line_start":565,"line_end":565,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. Doing","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18775,"byte_end":18844,"line_start":566,"line_end":566,"column_start":9,"column_end":78}},{"value":"/ so results in a panic.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18853,"byte_end":18879,"line_start":567,"line_end":567,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18888,"byte_end":18891,"line_start":568,"line_end":568,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18900,"byte_end":18913,"line_start":569,"line_end":569,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18922,"byte_end":18929,"line_start":570,"line_end":570,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18938,"byte_end":18974,"line_start":571,"line_end":571,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18983,"byte_end":18986,"line_start":572,"line_end":572,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":18995,"byte_end":19026,"line_start":573,"line_end":573,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get_or_try_init(|| Err(())), Err(()));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":19035,"byte_end":19093,"line_start":574,"line_end":574,"column_start":9,"column_end":67}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":19102,"byte_end":19136,"line_start":575,"line_end":575,"column_start":9,"column_end":43}},{"value":"/ let value = cell.get_or_try_init(|| -> Result<i32, ()> {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":19145,"byte_end":19205,"line_start":576,"line_end":576,"column_start":9,"column_end":69}},{"value":"/     Ok(92)","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":19214,"byte_end":19228,"line_start":577,"line_end":577,"column_start":9,"column_end":23}},{"value":"/ });","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":19237,"byte_end":19244,"line_start":578,"line_end":578,"column_start":9,"column_end":16}},{"value":"/ assert_eq!(value, Ok(&92));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":19253,"byte_end":19284,"line_start":579,"line_end":579,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get(), Some(&92))","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":19293,"byte_end":19330,"line_start":580,"line_end":580,"column_start":9,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":19339,"byte_end":19346,"line_start":581,"line_end":581,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21174,"byte_end":21178,"line_start":627,"line_end":627,"column_start":16,"column_end":20},"name":"take","qualname":"<OnceCell<T>>::take","value":"fn take<'_>(&'_ mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","sig":null,"attributes":[{"value":"/ Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20027,"byte_end":20112,"line_start":598,"line_end":598,"column_start":9,"column_end":94}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20121,"byte_end":20124,"line_start":599,"line_end":599,"column_start":9,"column_end":12}},{"value":"/ Has no effect and returns `None` if the `OnceCell` hasn't been initialized.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20133,"byte_end":20212,"line_start":600,"line_end":600,"column_start":9,"column_end":88}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20221,"byte_end":20224,"line_start":601,"line_end":601,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20233,"byte_end":20247,"line_start":602,"line_end":602,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20256,"byte_end":20259,"line_start":603,"line_end":603,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20268,"byte_end":20275,"line_start":604,"line_end":604,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20284,"byte_end":20320,"line_start":605,"line_end":605,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20329,"byte_end":20332,"line_start":606,"line_end":606,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20341,"byte_end":20394,"line_start":607,"line_end":607,"column_start":9,"column_end":62}},{"value":"/ assert_eq!(cell.take(), None);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20403,"byte_end":20437,"line_start":608,"line_end":608,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20446,"byte_end":20449,"line_start":609,"line_end":609,"column_start":9,"column_end":12}},{"value":"/ let mut cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20458,"byte_end":20493,"line_start":610,"line_end":610,"column_start":9,"column_end":44}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20502,"byte_end":20545,"line_start":611,"line_end":611,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.take(), Some(\"hello\".to_string()));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20554,"byte_end":20609,"line_start":612,"line_end":612,"column_start":9,"column_end":64}},{"value":"/ assert_eq!(cell.get(), None);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20618,"byte_end":20651,"line_start":613,"line_end":613,"column_start":9,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20660,"byte_end":20667,"line_start":614,"line_end":614,"column_start":9,"column_end":16}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20676,"byte_end":20679,"line_start":615,"line_end":615,"column_start":9,"column_end":12}},{"value":"/ This method is allowed to violate the invariant of writing to a `OnceCell`","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20688,"byte_end":20766,"line_start":616,"line_end":616,"column_start":9,"column_end":87}},{"value":"/ at most once because it requires `&mut` access to `self`. As with all","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20775,"byte_end":20848,"line_start":617,"line_end":617,"column_start":9,"column_end":82}},{"value":"/ interior mutability, `&mut` access permits arbitrary modification:","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20857,"byte_end":20927,"line_start":618,"line_end":618,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20936,"byte_end":20939,"line_start":619,"line_end":619,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20948,"byte_end":20955,"line_start":620,"line_end":620,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":20964,"byte_end":21000,"line_start":621,"line_end":621,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21009,"byte_end":21012,"line_start":622,"line_end":622,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<u32> = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21021,"byte_end":21071,"line_start":623,"line_end":623,"column_start":9,"column_end":59}},{"value":"/ cell.set(92).unwrap();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21080,"byte_end":21106,"line_start":624,"line_end":624,"column_start":9,"column_end":35}},{"value":"/ cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21115,"byte_end":21142,"line_start":625,"line_end":625,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21151,"byte_end":21158,"line_start":626,"line_end":626,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21837,"byte_end":21847,"line_start":647,"line_end":647,"column_start":16,"column_end":26},"name":"into_inner","qualname":"<OnceCell<T>>::into_inner","value":"fn into_inner(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `OnceCell`, returning the wrapped value.","sig":null,"attributes":[{"value":"/ Consumes the `OnceCell`, returning the wrapped value.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21285,"byte_end":21342,"line_start":631,"line_end":631,"column_start":9,"column_end":66}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21351,"byte_end":21354,"line_start":632,"line_end":632,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell was empty.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21363,"byte_end":21404,"line_start":633,"line_end":633,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21413,"byte_end":21416,"line_start":634,"line_end":634,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21425,"byte_end":21439,"line_start":635,"line_end":635,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21448,"byte_end":21451,"line_start":636,"line_end":636,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21460,"byte_end":21467,"line_start":637,"line_end":637,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21476,"byte_end":21512,"line_start":638,"line_end":638,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21521,"byte_end":21524,"line_start":639,"line_end":639,"column_start":9,"column_end":12}},{"value":"/ let cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21533,"byte_end":21582,"line_start":640,"line_end":640,"column_start":9,"column_end":58}},{"value":"/ assert_eq!(cell.into_inner(), None);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21591,"byte_end":21631,"line_start":641,"line_end":641,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21640,"byte_end":21643,"line_start":642,"line_end":642,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21652,"byte_end":21683,"line_start":643,"line_end":643,"column_start":9,"column_end":40}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21692,"byte_end":21735,"line_start":644,"line_end":644,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21744,"byte_end":21805,"line_start":645,"line_end":645,"column_start":9,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":21814,"byte_end":21821,"line_start":646,"line_end":646,"column_start":9,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":171},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22574,"byte_end":22578,"line_start":674,"line_end":674,"column_start":16,"column_end":20},"name":"Lazy","qualname":"::unsync::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22107,"byte_end":22160,"line_start":654,"line_end":654,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22165,"byte_end":22168,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22173,"byte_end":22186,"line_start":656,"line_end":656,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22191,"byte_end":22198,"line_start":657,"line_end":657,"column_start":5,"column_end":12}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22203,"byte_end":22235,"line_start":658,"line_end":658,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22240,"byte_end":22243,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ let lazy: Lazy<i32> = Lazy::new(|| {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22248,"byte_end":22288,"line_start":660,"line_end":660,"column_start":5,"column_end":45}},{"value":"/     println!(\"initializing\");","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22293,"byte_end":22326,"line_start":661,"line_end":661,"column_start":5,"column_end":38}},{"value":"/     92","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22331,"byte_end":22341,"line_start":662,"line_end":662,"column_start":5,"column_end":15}},{"value":"/ });","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22346,"byte_end":22353,"line_start":663,"line_end":663,"column_start":5,"column_end":12}},{"value":"/ println!(\"ready\");","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22358,"byte_end":22380,"line_start":664,"line_end":664,"column_start":5,"column_end":27}},{"value":"/ println!(\"{}\", *lazy);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22385,"byte_end":22411,"line_start":665,"line_end":665,"column_start":5,"column_end":31}},{"value":"/ println!(\"{}\", *lazy);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22416,"byte_end":22442,"line_start":666,"line_end":666,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22447,"byte_end":22450,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ // Prints:","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22455,"byte_end":22469,"line_start":668,"line_end":668,"column_start":5,"column_end":19}},{"value":"/ //   ready","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22474,"byte_end":22488,"line_start":669,"line_end":669,"column_start":5,"column_end":19}},{"value":"/ //   initializing","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22493,"byte_end":22514,"line_start":670,"line_end":670,"column_start":5,"column_end":26}},{"value":"/ //   92","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22519,"byte_end":22530,"line_start":671,"line_end":671,"column_start":5,"column_end":16}},{"value":"/ //   92","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22535,"byte_end":22546,"line_start":672,"line_end":672,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22551,"byte_end":22558,"line_start":673,"line_end":673,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22826,"byte_end":22829,"line_start":682,"line_end":682,"column_start":12,"column_end":15},"name":"fmt","qualname":"<Lazy<T, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10286},"children":[],"decl_id":{"krate":2,"index":10287},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23456,"byte_end":23459,"line_start":702,"line_end":702,"column_start":22,"column_end":25},"name":"new","qualname":"<Lazy<T, F>>::new","value":"const fn new(F) -> Lazy<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lazy value with the given initializing function.","sig":null,"attributes":[{"value":"/ Creates a new lazy value with the given initializing function.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23022,"byte_end":23088,"line_start":688,"line_end":688,"column_start":9,"column_end":75}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23097,"byte_end":23100,"line_start":689,"line_end":689,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23109,"byte_end":23122,"line_start":690,"line_end":690,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23131,"byte_end":23138,"line_start":691,"line_end":691,"column_start":9,"column_end":16}},{"value":"/ # fn main() {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23147,"byte_end":23164,"line_start":692,"line_end":692,"column_start":9,"column_end":26}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23173,"byte_end":23205,"line_start":693,"line_end":693,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23214,"byte_end":23217,"line_start":694,"line_end":694,"column_start":9,"column_end":12}},{"value":"/ let hello = \"Hello, World!\".to_string();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23226,"byte_end":23270,"line_start":695,"line_end":695,"column_start":9,"column_end":53}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23279,"byte_end":23282,"line_start":696,"line_end":696,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| hello.to_uppercase());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23291,"byte_end":23341,"line_start":697,"line_end":697,"column_start":9,"column_end":59}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23350,"byte_end":23353,"line_start":698,"line_end":698,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(&*lazy, \"HELLO, WORLD!\");","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23362,"byte_end":23402,"line_start":699,"line_end":699,"column_start":9,"column_end":49}},{"value":"/ # }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23411,"byte_end":23418,"line_start":700,"line_end":700,"column_start":9,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23427,"byte_end":23434,"line_start":701,"line_end":701,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23737,"byte_end":23747,"line_start":709,"line_end":709,"column_start":16,"column_end":26},"name":"into_value","qualname":"<Lazy<T, F>>::into_value","value":"fn into_value(Lazy<T, F>) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `Lazy` returning the stored value.","sig":null,"attributes":[{"value":"/ Consumes this `Lazy` returning the stored value.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23576,"byte_end":23628,"line_start":706,"line_end":706,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23637,"byte_end":23640,"line_start":707,"line_end":707,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23649,"byte_end":23721,"line_start":708,"line_end":708,"column_start":9,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24531,"byte_end":24536,"line_start":733,"line_end":733,"column_start":16,"column_end":21},"name":"force","qualname":"<Lazy<T, F>>::force","value":"fn force<'_>(&'_ Lazy<T, F>) -> &'_ T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and returns a reference to\n the result.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and returns a reference to","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24081,"byte_end":24152,"line_start":719,"line_end":719,"column_start":9,"column_end":80}},{"value":"/ the result.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24161,"byte_end":24176,"line_start":720,"line_end":720,"column_start":9,"column_end":24}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24185,"byte_end":24188,"line_start":721,"line_end":721,"column_start":9,"column_end":12}},{"value":"/ This is equivalent to the `Deref` impl, but is explicit.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24197,"byte_end":24257,"line_start":722,"line_end":722,"column_start":9,"column_end":69}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24266,"byte_end":24269,"line_start":723,"line_end":723,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24278,"byte_end":24291,"line_start":724,"line_end":724,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24300,"byte_end":24307,"line_start":725,"line_end":725,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24316,"byte_end":24348,"line_start":726,"line_end":726,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24357,"byte_end":24360,"line_start":727,"line_end":727,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24369,"byte_end":24401,"line_start":728,"line_end":728,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24410,"byte_end":24413,"line_start":729,"line_end":729,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force(&lazy), &92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24422,"byte_end":24462,"line_start":730,"line_end":730,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24471,"byte_end":24499,"line_start":731,"line_end":731,"column_start":9,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24508,"byte_end":24515,"line_start":732,"line_end":732,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25241,"byte_end":25250,"line_start":754,"line_end":754,"column_start":16,"column_end":25},"name":"force_mut","qualname":"<Lazy<T, F>>::force_mut","value":"fn force_mut<'_>(&'_ mut Lazy<T, F>) -> &'_ mut T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and returns a mutable reference to\n the result.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and returns a mutable reference to","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24770,"byte_end":24849,"line_start":740,"line_end":740,"column_start":9,"column_end":88}},{"value":"/ the result.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24858,"byte_end":24873,"line_start":741,"line_end":741,"column_start":9,"column_end":24}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24882,"byte_end":24885,"line_start":742,"line_end":742,"column_start":9,"column_end":12}},{"value":"/ This is equivalent to the `DerefMut` impl, but is explicit.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24894,"byte_end":24957,"line_start":743,"line_end":743,"column_start":9,"column_end":72}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24966,"byte_end":24969,"line_start":744,"line_end":744,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24978,"byte_end":24991,"line_start":745,"line_end":745,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25000,"byte_end":25007,"line_start":746,"line_end":746,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25016,"byte_end":25048,"line_start":747,"line_end":747,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25057,"byte_end":25060,"line_start":748,"line_end":748,"column_start":9,"column_end":12}},{"value":"/ let mut lazy = Lazy::new(|| 92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25069,"byte_end":25105,"line_start":749,"line_end":749,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25114,"byte_end":25117,"line_start":750,"line_end":750,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force_mut(&mut lazy), &92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25126,"byte_end":25174,"line_start":751,"line_end":751,"column_start":9,"column_end":57}},{"value":"/ assert_eq!(*lazy, 92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25183,"byte_end":25209,"line_start":752,"line_end":752,"column_start":9,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25218,"byte_end":25225,"line_start":753,"line_end":753,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25844,"byte_end":25847,"line_start":772,"line_end":772,"column_start":16,"column_end":19},"name":"get","qualname":"<Lazy<T, F>>::get","value":"fn get<'_>(&'_ Lazy<T, F>) -> Option<&'_ T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the result of this lazy value if\n it was initialized, otherwise returns `None`.","sig":null,"attributes":[{"value":"/ Gets the reference to the result of this lazy value if","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25402,"byte_end":25460,"line_start":759,"line_end":759,"column_start":9,"column_end":67}},{"value":"/ it was initialized, otherwise returns `None`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25469,"byte_end":25518,"line_start":760,"line_end":760,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25527,"byte_end":25530,"line_start":761,"line_end":761,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25539,"byte_end":25552,"line_start":762,"line_end":762,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25561,"byte_end":25568,"line_start":763,"line_end":763,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25577,"byte_end":25609,"line_start":764,"line_end":764,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25618,"byte_end":25621,"line_start":765,"line_end":765,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25630,"byte_end":25662,"line_start":766,"line_end":766,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25671,"byte_end":25674,"line_start":767,"line_end":767,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::get(&lazy), None);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25683,"byte_end":25722,"line_start":768,"line_end":768,"column_start":9,"column_end":48}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25731,"byte_end":25759,"line_start":769,"line_end":769,"column_start":9,"column_end":37}},{"value":"/ assert_eq!(Lazy::get(&lazy), Some(&92));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25768,"byte_end":25812,"line_start":770,"line_end":770,"column_start":9,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25821,"byte_end":25828,"line_start":771,"line_end":771,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26402,"byte_end":26409,"line_start":789,"line_end":789,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<Lazy<T, F>>::get_mut","value":"fn get_mut<'_>(&'_ mut Lazy<T, F>) -> Option<&'_ mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the mutable reference to the result of this lazy value if\n it was initialized, otherwise returns `None`.","sig":null,"attributes":[{"value":"/ Gets the mutable reference to the result of this lazy value if","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":25930,"byte_end":25996,"line_start":776,"line_end":776,"column_start":9,"column_end":75}},{"value":"/ it was initialized, otherwise returns `None`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26005,"byte_end":26054,"line_start":777,"line_end":777,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26063,"byte_end":26066,"line_start":778,"line_end":778,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26075,"byte_end":26088,"line_start":779,"line_end":779,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26097,"byte_end":26104,"line_start":780,"line_end":780,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26113,"byte_end":26145,"line_start":781,"line_end":781,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26154,"byte_end":26157,"line_start":782,"line_end":782,"column_start":9,"column_end":12}},{"value":"/ let mut lazy = Lazy::new(|| 92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26166,"byte_end":26202,"line_start":783,"line_end":783,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26211,"byte_end":26214,"line_start":784,"line_end":784,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::get_mut(&mut lazy), None);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26223,"byte_end":26270,"line_start":785,"line_end":785,"column_start":9,"column_end":56}},{"value":"/ assert_eq!(*lazy, 92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26279,"byte_end":26305,"line_start":786,"line_end":786,"column_start":9,"column_end":35}},{"value":"/ assert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26314,"byte_end":26370,"line_start":787,"line_end":787,"column_start":9,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26379,"byte_end":26386,"line_start":788,"line_end":788,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26591,"byte_end":26596,"line_start":796,"line_end":796,"column_start":12,"column_end":17},"name":"deref","qualname":"<Lazy<T, F> as std::ops::Deref>::deref","value":"fn deref<'_>(&'_ Self) -> &'_ T","parent":{"krate":2,"index":3486},"children":[],"decl_id":{"krate":2,"index":3488},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26726,"byte_end":26735,"line_start":802,"line_end":802,"column_start":12,"column_end":21},"name":"deref_mut","qualname":"<Lazy<T, F> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut<'_>(&'_ mut Self) -> &'_ mut T","parent":{"krate":2,"index":3499},"children":[],"decl_id":{"krate":2,"index":3500},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27010,"byte_end":27017,"line_start":810,"line_end":810,"column_start":12,"column_end":19},"name":"default","qualname":"<Lazy<T> as std::default::Default>::default","value":"fn default() -> Lazy<T>","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":" Creates a new lazy value using `Default` as the initializing function.\n","sig":null,"attributes":[{"value":"/ Creates a new lazy value using `Default` as the initializing function.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26924,"byte_end":26998,"line_start":809,"line_end":809,"column_start":9,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":212},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27167,"byte_end":27171,"line_start":818,"line_end":818,"column_start":9,"column_end":13},"name":"sync","qualname":"::sync","value":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":282},{"krate":0,"index":287},{"krate":0,"index":291},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":304},{"krate":0,"index":313},{"krate":0,"index":318},{"krate":0,"index":323},{"krate":0,"index":326}],"decl_id":null,"docs":" Thread-safe, blocking version of `OnceCell`.\n","sig":null,"attributes":[{"value":"/ Thread-safe, blocking version of `OnceCell`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27086,"byte_end":27134,"line_start":816,"line_end":816,"column_start":1,"column_end":49}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27135,"byte_end":27158,"line_start":817,"line_end":817,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":240},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28429,"byte_end":28437,"line_start":856,"line_end":856,"column_start":16,"column_end":24},"name":"OnceCell","qualname":"::sync::OnceCell","value":"","parent":null,"children":[],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27357,"byte_end":27414,"line_start":828,"line_end":828,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27419,"byte_end":27422,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ `OnceCell` provides `&` references to the contents without RAII guards.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27427,"byte_end":27502,"line_start":830,"line_end":830,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27507,"byte_end":27510,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ Reading a non-`None` value out of `OnceCell` establishes a","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27515,"byte_end":27577,"line_start":832,"line_end":832,"column_start":5,"column_end":67}},{"value":"/ happens-before relationship with a corresponding write. For example, if","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27582,"byte_end":27657,"line_start":833,"line_end":833,"column_start":5,"column_end":80}},{"value":"/ thread A initializes the cell with `get_or_init(f)`, and thread B","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27662,"byte_end":27731,"line_start":834,"line_end":834,"column_start":5,"column_end":74}},{"value":"/ subsequently reads the result of this call, B also observes all the side","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27736,"byte_end":27812,"line_start":835,"line_end":835,"column_start":5,"column_end":81}},{"value":"/ effects of `f`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27817,"byte_end":27836,"line_start":836,"line_end":836,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27841,"byte_end":27844,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27849,"byte_end":27862,"line_start":838,"line_end":838,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27867,"byte_end":27874,"line_start":839,"line_end":839,"column_start":5,"column_end":12}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27879,"byte_end":27913,"line_start":840,"line_end":840,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27918,"byte_end":27921,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ static CELL: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27926,"byte_end":27978,"line_start":842,"line_end":842,"column_start":5,"column_end":57}},{"value":"/ assert!(CELL.get().is_none());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":27983,"byte_end":28017,"line_start":843,"line_end":843,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28022,"byte_end":28025,"line_start":844,"line_end":844,"column_start":5,"column_end":8}},{"value":"/ std::thread::spawn(|| {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28030,"byte_end":28057,"line_start":845,"line_end":845,"column_start":5,"column_end":32}},{"value":"/     let value: &String = CELL.get_or_init(|| {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28062,"byte_end":28112,"line_start":846,"line_end":846,"column_start":5,"column_end":55}},{"value":"/         \"Hello, World!\".to_string()","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28117,"byte_end":28156,"line_start":847,"line_end":847,"column_start":5,"column_end":44}},{"value":"/     });","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28161,"byte_end":28172,"line_start":848,"line_end":848,"column_start":5,"column_end":16}},{"value":"/     assert_eq!(value, \"Hello, World!\");","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28177,"byte_end":28220,"line_start":849,"line_end":849,"column_start":5,"column_end":48}},{"value":"/ }).join().unwrap();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28225,"byte_end":28248,"line_start":850,"line_end":850,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28253,"byte_end":28256,"line_start":851,"line_end":851,"column_start":5,"column_end":8}},{"value":"/ let value: Option<&String> = CELL.get();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28261,"byte_end":28305,"line_start":852,"line_end":852,"column_start":5,"column_end":49}},{"value":"/ assert!(value.is_some());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28310,"byte_end":28339,"line_start":853,"line_end":853,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(value.unwrap().as_str(), \"Hello, World!\");","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28344,"byte_end":28401,"line_start":854,"line_end":854,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28406,"byte_end":28413,"line_start":855,"line_end":855,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28500,"byte_end":28507,"line_start":859,"line_end":859,"column_start":12,"column_end":19},"name":"default","qualname":"<OnceCell<T> as std::default::Default>::default","value":"fn default() -> OnceCell<T>","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28636,"byte_end":28639,"line_start":865,"line_end":865,"column_start":12,"column_end":15},"name":"fmt","qualname":"<OnceCell<T> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10286},"children":[],"decl_id":{"krate":2,"index":10287},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28933,"byte_end":28938,"line_start":874,"line_end":874,"column_start":12,"column_end":17},"name":"clone","qualname":"<OnceCell<T> as std::clone::Clone>::clone","value":"fn clone<'_>(&'_ Self) -> OnceCell<T>","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2883},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29131,"byte_end":29141,"line_start":881,"line_end":881,"column_start":12,"column_end":22},"name":"clone_from","qualname":"<OnceCell<T> as std::clone::Clone>::clone_from","value":"fn clone_from<'_, '_>(&'_ mut Self, &'_ Self)","parent":{"krate":2,"index":2882},"children":[],"decl_id":{"krate":2,"index":2884},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29417,"byte_end":29421,"line_start":890,"line_end":890,"column_start":12,"column_end":16},"name":"from","qualname":"<OnceCell<T> as std::convert::From>::from","value":"fn from(T) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29557,"byte_end":29559,"line_start":896,"line_end":896,"column_start":12,"column_end":14},"name":"eq","qualname":"<OnceCell<T> as std::cmp::PartialEq>::eq","value":"fn eq<'_, '_>(&'_ Self, &'_ OnceCell<T>) -> bool","parent":{"krate":2,"index":2915},"children":[],"decl_id":{"krate":2,"index":2917},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29777,"byte_end":29780,"line_start":905,"line_end":905,"column_start":22,"column_end":25},"name":"new","qualname":"<OnceCell<T>>::new","value":"const fn new() -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29726,"byte_end":29755,"line_start":904,"line_end":904,"column_start":9,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29909,"byte_end":29919,"line_start":910,"line_end":910,"column_start":22,"column_end":32},"name":"with_value","qualname":"<OnceCell<T>>::with_value","value":"const fn with_value(T) -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new initialized cell.\n","sig":null,"attributes":[{"value":"/ Creates a new initialized cell.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29852,"byte_end":29887,"line_start":909,"line_end":909,"column_start":9,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30195,"byte_end":30198,"line_start":918,"line_end":918,"column_start":16,"column_end":19},"name":"get","qualname":"<OnceCell<T>>::get","value":"fn get<'_>(&'_ Self) -> Option<&'_ T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets the reference to the underlying value.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30011,"byte_end":30058,"line_start":914,"line_end":914,"column_start":9,"column_end":56}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30067,"byte_end":30070,"line_start":915,"line_end":915,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty, or being initialized. This","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30079,"byte_end":30146,"line_start":916,"line_end":916,"column_start":9,"column_end":76}},{"value":"/ method never blocks.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30155,"byte_end":30179,"line_start":917,"line_end":917,"column_start":9,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31208,"byte_end":31212,"line_start":947,"line_end":947,"column_start":16,"column_end":20},"name":"wait","qualname":"<OnceCell<T>>::wait","value":"fn wait<'_>(&'_ Self) -> &'_ T","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the underlying value, blocking the current\n thread until it is set.","sig":null,"attributes":[{"value":"/ Gets the reference to the underlying value, blocking the current","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30442,"byte_end":30510,"line_start":927,"line_end":927,"column_start":9,"column_end":77}},{"value":"/ thread until it is set.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30519,"byte_end":30546,"line_start":928,"line_end":928,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30555,"byte_end":30558,"line_start":929,"line_end":929,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30567,"byte_end":30574,"line_start":930,"line_end":930,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30583,"byte_end":30617,"line_start":931,"line_end":931,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30626,"byte_end":30629,"line_start":932,"line_end":932,"column_start":9,"column_end":12}},{"value":"/ let mut cell = std::sync::Arc::new(OnceCell::new());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30638,"byte_end":30694,"line_start":933,"line_end":933,"column_start":9,"column_end":65}},{"value":"/ let t = std::thread::spawn({","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30703,"byte_end":30735,"line_start":934,"line_end":934,"column_start":9,"column_end":41}},{"value":"/     let cell = std::sync::Arc::clone(&cell);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30744,"byte_end":30792,"line_start":935,"line_end":935,"column_start":9,"column_end":57}},{"value":"/     move || cell.set(92).unwrap()","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30801,"byte_end":30838,"line_start":936,"line_end":936,"column_start":9,"column_end":46}},{"value":"/ });","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30847,"byte_end":30854,"line_start":937,"line_end":937,"column_start":9,"column_end":16}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30863,"byte_end":30866,"line_start":938,"line_end":938,"column_start":9,"column_end":12}},{"value":"/ // Returns immediately, but might return None.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30875,"byte_end":30925,"line_start":939,"line_end":939,"column_start":9,"column_end":59}},{"value":"/ let _value_or_none = cell.get();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30934,"byte_end":30970,"line_start":940,"line_end":940,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30979,"byte_end":30982,"line_start":941,"line_end":941,"column_start":9,"column_end":12}},{"value":"/ // Will return 92, but might block until the other thread does `.set`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":30991,"byte_end":31065,"line_start":942,"line_end":942,"column_start":9,"column_end":83}},{"value":"/ let value: &u32 = cell.wait();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31074,"byte_end":31108,"line_start":943,"line_end":943,"column_start":9,"column_end":43}},{"value":"/ assert_eq!(*value, 92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31117,"byte_end":31144,"line_start":944,"line_end":944,"column_start":9,"column_end":36}},{"value":"/ t.join().unwrap();;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31153,"byte_end":31176,"line_start":945,"line_end":945,"column_start":9,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31185,"byte_end":31192,"line_start":946,"line_end":946,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32163,"byte_end":32170,"line_start":972,"line_end":972,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<OnceCell<T>>::get_mut","value":"fn get_mut<'_>(&'_ mut Self) -> Option<&'_ mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the mutable reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets the mutable reference to the underlying value.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31542,"byte_end":31597,"line_start":957,"line_end":957,"column_start":9,"column_end":64}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31606,"byte_end":31609,"line_start":958,"line_end":958,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31618,"byte_end":31658,"line_start":959,"line_end":959,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31667,"byte_end":31670,"line_start":960,"line_end":960,"column_start":9,"column_end":12}},{"value":"/ This method is allowed to violate the invariant of writing to a `OnceCell`","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31679,"byte_end":31757,"line_start":961,"line_end":961,"column_start":9,"column_end":87}},{"value":"/ at most once because it requires `&mut` access to `self`. As with all","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31766,"byte_end":31839,"line_start":962,"line_end":962,"column_start":9,"column_end":82}},{"value":"/ interior mutability, `&mut` access permits arbitrary modification:","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31848,"byte_end":31918,"line_start":963,"line_end":963,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31927,"byte_end":31930,"line_start":964,"line_end":964,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31939,"byte_end":31946,"line_start":965,"line_end":965,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31955,"byte_end":31989,"line_start":966,"line_end":966,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":31998,"byte_end":32001,"line_start":967,"line_end":967,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<u32> = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32010,"byte_end":32060,"line_start":968,"line_end":968,"column_start":9,"column_end":59}},{"value":"/ cell.set(92).unwrap();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32069,"byte_end":32095,"line_start":969,"line_end":969,"column_start":9,"column_end":35}},{"value":"/ cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32104,"byte_end":32131,"line_start":970,"line_end":970,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32140,"byte_end":32147,"line_start":971,"line_end":971,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32572,"byte_end":32585,"line_start":983,"line_end":983,"column_start":23,"column_end":36},"name":"get_unchecked","qualname":"<OnceCell<T>>::get_unchecked","value":"unsafe fn get_unchecked<'_>(&'_ Self) -> &'_ T","parent":null,"children":[],"decl_id":null,"docs":" Get the reference to the underlying value, without checking if the\n cell is initialized.","sig":null,"attributes":[{"value":"/ Get the reference to the underlying value, without checking if the","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32250,"byte_end":32320,"line_start":976,"line_end":976,"column_start":9,"column_end":79}},{"value":"/ cell is initialized.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32329,"byte_end":32353,"line_start":977,"line_end":977,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32362,"byte_end":32365,"line_start":978,"line_end":978,"column_start":9,"column_end":12}},{"value":"/ # Safety","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32374,"byte_end":32386,"line_start":979,"line_end":979,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32395,"byte_end":32398,"line_start":980,"line_end":980,"column_start":9,"column_end":12}},{"value":"/ Caller must ensure that the cell is in initialized state, and that","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32407,"byte_end":32477,"line_start":981,"line_end":981,"column_start":9,"column_end":79}},{"value":"/ the contents are acquired by (synchronized to) this thread.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32486,"byte_end":32549,"line_start":982,"line_end":982,"column_start":9,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33369,"byte_end":33372,"line_start":1010,"line_end":1010,"column_start":16,"column_end":19},"name":"set","qualname":"<OnceCell<T>>::set","value":"fn set<'_>(&'_ Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32655,"byte_end":32701,"line_start":987,"line_end":987,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32710,"byte_end":32713,"line_start":988,"line_end":988,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32722,"byte_end":32791,"line_start":989,"line_end":989,"column_start":9,"column_end":78}},{"value":"/ full.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32800,"byte_end":32809,"line_start":990,"line_end":990,"column_start":9,"column_end":18}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32818,"byte_end":32821,"line_start":991,"line_end":991,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32830,"byte_end":32843,"line_start":992,"line_end":992,"column_start":9,"column_end":22}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32852,"byte_end":32855,"line_start":993,"line_end":993,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32864,"byte_end":32871,"line_start":994,"line_end":994,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32880,"byte_end":32914,"line_start":995,"line_end":995,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32923,"byte_end":32926,"line_start":996,"line_end":996,"column_start":9,"column_end":12}},{"value":"/ static CELL: OnceCell<i32> = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32935,"byte_end":32984,"line_start":997,"line_end":997,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":32993,"byte_end":32996,"line_start":998,"line_end":998,"column_start":9,"column_end":12}},{"value":"/ fn main() {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33005,"byte_end":33020,"line_start":999,"line_end":999,"column_start":9,"column_end":24}},{"value":"/     assert!(CELL.get().is_none());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33029,"byte_end":33067,"line_start":1000,"line_end":1000,"column_start":9,"column_end":47}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33076,"byte_end":33079,"line_start":1001,"line_end":1001,"column_start":9,"column_end":12}},{"value":"/     std::thread::spawn(|| {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33088,"byte_end":33119,"line_start":1002,"line_end":1002,"column_start":9,"column_end":40}},{"value":"/         assert_eq!(CELL.set(92), Ok(()));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33128,"byte_end":33173,"line_start":1003,"line_end":1003,"column_start":9,"column_end":54}},{"value":"/     }).join().unwrap();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33182,"byte_end":33209,"line_start":1004,"line_end":1004,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33218,"byte_end":33221,"line_start":1005,"line_end":1005,"column_start":9,"column_end":12}},{"value":"/     assert_eq!(CELL.set(62), Err(62));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33230,"byte_end":33272,"line_start":1006,"line_end":1006,"column_start":9,"column_end":51}},{"value":"/     assert_eq!(CELL.get(), Some(&92));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33281,"byte_end":33323,"line_start":1007,"line_end":1007,"column_start":9,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33332,"byte_end":33337,"line_start":1008,"line_end":1008,"column_start":9,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33346,"byte_end":33353,"line_start":1009,"line_end":1009,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34063,"byte_end":34073,"line_start":1032,"line_end":1032,"column_start":16,"column_end":26},"name":"try_insert","qualname":"<OnceCell<T>>::try_insert","value":"fn try_insert<'_>(&'_ Self, T) -> Result<&'_ T, (&'_ T, T)>","parent":null,"children":[],"decl_id":null,"docs":" Like [`set`](Self::set), but also returns a reference to the final cell value.","sig":null,"attributes":[{"value":"/ Like [`set`](Self::set), but also returns a reference to the final cell value.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33565,"byte_end":33647,"line_start":1017,"line_end":1017,"column_start":9,"column_end":91}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33656,"byte_end":33659,"line_start":1018,"line_end":1018,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33668,"byte_end":33681,"line_start":1019,"line_end":1019,"column_start":9,"column_end":22}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33690,"byte_end":33693,"line_start":1020,"line_end":1020,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33702,"byte_end":33709,"line_start":1021,"line_end":1021,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33718,"byte_end":33754,"line_start":1022,"line_end":1022,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33763,"byte_end":33766,"line_start":1023,"line_end":1023,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33775,"byte_end":33806,"line_start":1024,"line_end":1024,"column_start":9,"column_end":40}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33815,"byte_end":33849,"line_start":1025,"line_end":1025,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33858,"byte_end":33861,"line_start":1026,"line_end":1026,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(cell.try_insert(92), Ok(&92));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33870,"byte_end":33915,"line_start":1027,"line_end":1027,"column_start":9,"column_end":54}},{"value":"/ assert_eq!(cell.try_insert(62), Err((&92, 62)));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33924,"byte_end":33976,"line_start":1028,"line_end":1028,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33985,"byte_end":33988,"line_start":1029,"line_end":1029,"column_start":9,"column_end":12}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":33997,"byte_end":34031,"line_start":1030,"line_end":1030,"column_start":9,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34040,"byte_end":34047,"line_start":1031,"line_end":1031,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35417,"byte_end":35428,"line_start":1067,"line_end":1067,"column_start":16,"column_end":27},"name":"get_or_init","qualname":"<OnceCell<T>>::get_or_init","value":"fn get_or_init<F, '_>(&'_ Self, F) -> &'_ T where F: FnOnce() -> T","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell\n was empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34381,"byte_end":34452,"line_start":1041,"line_end":1041,"column_start":9,"column_end":80}},{"value":"/ was empty.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34461,"byte_end":34475,"line_start":1042,"line_end":1042,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34484,"byte_end":34487,"line_start":1043,"line_end":1043,"column_start":9,"column_end":12}},{"value":"/ Many threads may call `get_or_init` concurrently with different","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34496,"byte_end":34563,"line_start":1044,"line_end":1044,"column_start":9,"column_end":76}},{"value":"/ initializing functions, but it is guaranteed that only one function","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34572,"byte_end":34643,"line_start":1045,"line_end":1045,"column_start":9,"column_end":80}},{"value":"/ will be executed.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34652,"byte_end":34673,"line_start":1046,"line_end":1046,"column_start":9,"column_end":30}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34682,"byte_end":34685,"line_start":1047,"line_end":1047,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34694,"byte_end":34706,"line_start":1048,"line_end":1048,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34715,"byte_end":34718,"line_start":1049,"line_end":1049,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34727,"byte_end":34797,"line_start":1050,"line_end":1050,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34806,"byte_end":34832,"line_start":1051,"line_end":1051,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34841,"byte_end":34844,"line_start":1052,"line_end":1052,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. The","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34853,"byte_end":34920,"line_start":1053,"line_end":1053,"column_start":9,"column_end":76}},{"value":"/ exact outcome is unspecified. Current implementation deadlocks, but","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":34929,"byte_end":35000,"line_start":1054,"line_end":1054,"column_start":9,"column_end":80}},{"value":"/ this may be changed to a panic in the future.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35009,"byte_end":35058,"line_start":1055,"line_end":1055,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35067,"byte_end":35070,"line_start":1056,"line_end":1056,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35079,"byte_end":35092,"line_start":1057,"line_end":1057,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35101,"byte_end":35108,"line_start":1058,"line_end":1058,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35117,"byte_end":35151,"line_start":1059,"line_end":1059,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35160,"byte_end":35163,"line_start":1060,"line_end":1060,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35172,"byte_end":35203,"line_start":1061,"line_end":1061,"column_start":9,"column_end":40}},{"value":"/ let value = cell.get_or_init(|| 92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35212,"byte_end":35252,"line_start":1062,"line_end":1062,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35261,"byte_end":35288,"line_start":1063,"line_end":1063,"column_start":9,"column_end":36}},{"value":"/ let value = cell.get_or_init(|| unreachable!());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35297,"byte_end":35349,"line_start":1064,"line_end":1064,"column_start":9,"column_end":61}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35358,"byte_end":35385,"line_start":1065,"line_end":1065,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35394,"byte_end":35401,"line_start":1066,"line_end":1066,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36735,"byte_end":36750,"line_start":1104,"line_end":1104,"column_start":16,"column_end":31},"name":"get_or_try_init","qualname":"<OnceCell<T>>::get_or_try_init","value":"fn get_or_try_init<F, E, '_>(&'_ Self, F) -> Result<&'_ T, E> where\nF: FnOnce() -> Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35703,"byte_end":35765,"line_start":1078,"line_end":1078,"column_start":9,"column_end":71}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35774,"byte_end":35838,"line_start":1079,"line_end":1079,"column_start":9,"column_end":73}},{"value":"/ error is returned.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35847,"byte_end":35869,"line_start":1080,"line_end":1080,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35878,"byte_end":35881,"line_start":1081,"line_end":1081,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35890,"byte_end":35902,"line_start":1082,"line_end":1082,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35911,"byte_end":35914,"line_start":1083,"line_end":1083,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35923,"byte_end":35984,"line_start":1084,"line_end":1084,"column_start":9,"column_end":70}},{"value":"/ the cell remains uninitialized.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":35993,"byte_end":36028,"line_start":1085,"line_end":1085,"column_start":9,"column_end":44}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36037,"byte_end":36040,"line_start":1086,"line_end":1086,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36049,"byte_end":36112,"line_start":1087,"line_end":1087,"column_start":9,"column_end":72}},{"value":"/ The exact outcome is unspecified. Current implementation","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36121,"byte_end":36181,"line_start":1088,"line_end":1088,"column_start":9,"column_end":69}},{"value":"/ deadlocks, but this may be changed to a panic in the future.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36190,"byte_end":36254,"line_start":1089,"line_end":1089,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36263,"byte_end":36266,"line_start":1090,"line_end":1090,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36275,"byte_end":36288,"line_start":1091,"line_end":1091,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36297,"byte_end":36304,"line_start":1092,"line_end":1092,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36313,"byte_end":36347,"line_start":1093,"line_end":1093,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36356,"byte_end":36359,"line_start":1094,"line_end":1094,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36368,"byte_end":36399,"line_start":1095,"line_end":1095,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get_or_try_init(|| Err(())), Err(()));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36408,"byte_end":36466,"line_start":1096,"line_end":1096,"column_start":9,"column_end":67}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36475,"byte_end":36509,"line_start":1097,"line_end":1097,"column_start":9,"column_end":43}},{"value":"/ let value = cell.get_or_try_init(|| -> Result<i32, ()> {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36518,"byte_end":36578,"line_start":1098,"line_end":1098,"column_start":9,"column_end":69}},{"value":"/     Ok(92)","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36587,"byte_end":36601,"line_start":1099,"line_end":1099,"column_start":9,"column_end":23}},{"value":"/ });","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36610,"byte_end":36617,"line_start":1100,"line_end":1100,"column_start":9,"column_end":16}},{"value":"/ assert_eq!(value, Ok(&92));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36626,"byte_end":36657,"line_start":1101,"line_end":1101,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get(), Some(&92))","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36666,"byte_end":36703,"line_start":1102,"line_end":1102,"column_start":9,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":36712,"byte_end":36719,"line_start":1103,"line_end":1103,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38321,"byte_end":38325,"line_start":1148,"line_end":1148,"column_start":16,"column_end":20},"name":"take","qualname":"<OnceCell<T>>::take","value":"fn take<'_>(&'_ mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","sig":null,"attributes":[{"value":"/ Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37178,"byte_end":37263,"line_start":1119,"line_end":1119,"column_start":9,"column_end":94}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37272,"byte_end":37275,"line_start":1120,"line_end":1120,"column_start":9,"column_end":12}},{"value":"/ Has no effect and returns `None` if the `OnceCell` hasn't been initialized.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37284,"byte_end":37363,"line_start":1121,"line_end":1121,"column_start":9,"column_end":88}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37372,"byte_end":37375,"line_start":1122,"line_end":1122,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37384,"byte_end":37398,"line_start":1123,"line_end":1123,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37407,"byte_end":37410,"line_start":1124,"line_end":1124,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37419,"byte_end":37426,"line_start":1125,"line_end":1125,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37435,"byte_end":37469,"line_start":1126,"line_end":1126,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37478,"byte_end":37481,"line_start":1127,"line_end":1127,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37490,"byte_end":37543,"line_start":1128,"line_end":1128,"column_start":9,"column_end":62}},{"value":"/ assert_eq!(cell.take(), None);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37552,"byte_end":37586,"line_start":1129,"line_end":1129,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37595,"byte_end":37598,"line_start":1130,"line_end":1130,"column_start":9,"column_end":12}},{"value":"/ let mut cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37607,"byte_end":37642,"line_start":1131,"line_end":1131,"column_start":9,"column_end":44}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37651,"byte_end":37694,"line_start":1132,"line_end":1132,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.take(), Some(\"hello\".to_string()));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37703,"byte_end":37758,"line_start":1133,"line_end":1133,"column_start":9,"column_end":64}},{"value":"/ assert_eq!(cell.get(), None);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37767,"byte_end":37800,"line_start":1134,"line_end":1134,"column_start":9,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37809,"byte_end":37816,"line_start":1135,"line_end":1135,"column_start":9,"column_end":16}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37825,"byte_end":37828,"line_start":1136,"line_end":1136,"column_start":9,"column_end":12}},{"value":"/ This method is allowed to violate the invariant of writing to a `OnceCell`","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37837,"byte_end":37915,"line_start":1137,"line_end":1137,"column_start":9,"column_end":87}},{"value":"/ at most once because it requires `&mut` access to `self`. As with all","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":37924,"byte_end":37997,"line_start":1138,"line_end":1138,"column_start":9,"column_end":82}},{"value":"/ interior mutability, `&mut` access permits arbitrary modification:","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38006,"byte_end":38076,"line_start":1139,"line_end":1139,"column_start":9,"column_end":79}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38085,"byte_end":38088,"line_start":1140,"line_end":1140,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38097,"byte_end":38104,"line_start":1141,"line_end":1141,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38113,"byte_end":38147,"line_start":1142,"line_end":1142,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38156,"byte_end":38159,"line_start":1143,"line_end":1143,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<u32> = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38168,"byte_end":38218,"line_start":1144,"line_end":1144,"column_start":9,"column_end":59}},{"value":"/ cell.set(92).unwrap();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38227,"byte_end":38253,"line_start":1145,"line_end":1145,"column_start":9,"column_end":35}},{"value":"/ cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38262,"byte_end":38289,"line_start":1146,"line_end":1146,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38298,"byte_end":38305,"line_start":1147,"line_end":1147,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38970,"byte_end":38980,"line_start":1167,"line_end":1167,"column_start":16,"column_end":26},"name":"into_inner","qualname":"<OnceCell<T>>::into_inner","value":"fn into_inner(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `OnceCell`, returning the wrapped value. Returns\n `None` if the cell was empty.","sig":null,"attributes":[{"value":"/ Consumes the `OnceCell`, returning the wrapped value. Returns","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38432,"byte_end":38497,"line_start":1152,"line_end":1152,"column_start":9,"column_end":74}},{"value":"/ `None` if the cell was empty.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38506,"byte_end":38539,"line_start":1153,"line_end":1153,"column_start":9,"column_end":42}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38548,"byte_end":38551,"line_start":1154,"line_end":1154,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38560,"byte_end":38574,"line_start":1155,"line_end":1155,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38583,"byte_end":38586,"line_start":1156,"line_end":1156,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38595,"byte_end":38602,"line_start":1157,"line_end":1157,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38611,"byte_end":38645,"line_start":1158,"line_end":1158,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38654,"byte_end":38657,"line_start":1159,"line_end":1159,"column_start":9,"column_end":12}},{"value":"/ let cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38666,"byte_end":38715,"line_start":1160,"line_end":1160,"column_start":9,"column_end":58}},{"value":"/ assert_eq!(cell.into_inner(), None);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38724,"byte_end":38764,"line_start":1161,"line_end":1161,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38773,"byte_end":38776,"line_start":1162,"line_end":1162,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38785,"byte_end":38816,"line_start":1163,"line_end":1163,"column_start":9,"column_end":40}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38825,"byte_end":38868,"line_start":1164,"line_end":1164,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38877,"byte_end":38938,"line_start":1165,"line_end":1165,"column_start":9,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":38947,"byte_end":38954,"line_start":1166,"line_end":1166,"column_start":9,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":282},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39992,"byte_end":39996,"line_start":1205,"line_end":1205,"column_start":16,"column_end":20},"name":"Lazy","qualname":"::sync::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39055,"byte_end":39108,"line_start":1172,"line_end":1172,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39113,"byte_end":39116,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ This type is thread-safe and can be used in statics.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39121,"byte_end":39177,"line_start":1174,"line_end":1174,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39182,"byte_end":39185,"line_start":1175,"line_end":1175,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39190,"byte_end":39203,"line_start":1176,"line_end":1176,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39208,"byte_end":39211,"line_start":1177,"line_end":1177,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39216,"byte_end":39223,"line_start":1178,"line_end":1178,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39228,"byte_end":39262,"line_start":1179,"line_end":1179,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39267,"byte_end":39270,"line_start":1180,"line_end":1180,"column_start":5,"column_end":8}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39275,"byte_end":39305,"line_start":1181,"line_end":1181,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39310,"byte_end":39313,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ static HASHMAP: Lazy<HashMap<i32, String>> = Lazy::new(|| {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39318,"byte_end":39381,"line_start":1183,"line_end":1183,"column_start":5,"column_end":68}},{"value":"/     println!(\"initializing\");","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39386,"byte_end":39419,"line_start":1184,"line_end":1184,"column_start":5,"column_end":38}},{"value":"/     let mut m = HashMap::new();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39424,"byte_end":39459,"line_start":1185,"line_end":1185,"column_start":5,"column_end":40}},{"value":"/     m.insert(13, \"Spica\".to_string());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39464,"byte_end":39506,"line_start":1186,"line_end":1186,"column_start":5,"column_end":47}},{"value":"/     m.insert(74, \"Hoyten\".to_string());","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39511,"byte_end":39554,"line_start":1187,"line_end":1187,"column_start":5,"column_end":48}},{"value":"/     m","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39559,"byte_end":39568,"line_start":1188,"line_end":1188,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39573,"byte_end":39580,"line_start":1189,"line_end":1189,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39585,"byte_end":39588,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39593,"byte_end":39608,"line_start":1191,"line_end":1191,"column_start":5,"column_end":20}},{"value":"/     println!(\"ready\");","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39613,"byte_end":39639,"line_start":1192,"line_end":1192,"column_start":5,"column_end":31}},{"value":"/     std::thread::spawn(|| {","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39644,"byte_end":39675,"line_start":1193,"line_end":1193,"column_start":5,"column_end":36}},{"value":"/         println!(\"{:?}\", HASHMAP.get(&13));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39680,"byte_end":39727,"line_start":1194,"line_end":1194,"column_start":5,"column_end":52}},{"value":"/     }).join().unwrap();","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39732,"byte_end":39759,"line_start":1195,"line_end":1195,"column_start":5,"column_end":32}},{"value":"/     println!(\"{:?}\", HASHMAP.get(&74));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39764,"byte_end":39807,"line_start":1196,"line_end":1196,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39812,"byte_end":39815,"line_start":1197,"line_end":1197,"column_start":5,"column_end":8}},{"value":"/     // Prints:","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39820,"byte_end":39838,"line_start":1198,"line_end":1198,"column_start":5,"column_end":23}},{"value":"/     //   ready","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39843,"byte_end":39861,"line_start":1199,"line_end":1199,"column_start":5,"column_end":23}},{"value":"/     //   initializing","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39866,"byte_end":39891,"line_start":1200,"line_end":1200,"column_start":5,"column_end":30}},{"value":"/     //   Some(\"Spica\")","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39896,"byte_end":39922,"line_start":1201,"line_end":1201,"column_start":5,"column_end":31}},{"value":"/     //   Some(\"Hoyten\")","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39927,"byte_end":39954,"line_start":1202,"line_end":1202,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39959,"byte_end":39964,"line_start":1203,"line_end":1203,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":39969,"byte_end":39976,"line_start":1204,"line_end":1204,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":40148,"byte_end":40151,"line_start":1211,"line_end":1211,"column_start":12,"column_end":15},"name":"fmt","qualname":"<Lazy<T, F> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10286},"children":[],"decl_id":{"krate":2,"index":10287},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":40917,"byte_end":40920,"line_start":1228,"line_end":1228,"column_start":22,"column_end":25},"name":"new","qualname":"<Lazy<T, F>>::new","value":"const fn new(F) -> Lazy<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lazy value with the given initializing\n function.\n","sig":null,"attributes":[{"value":"/ Creates a new lazy value with the given initializing","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":40817,"byte_end":40873,"line_start":1226,"line_end":1226,"column_start":9,"column_end":65}},{"value":"/ function.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":40882,"byte_end":40895,"line_start":1227,"line_end":1227,"column_start":9,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41192,"byte_end":41202,"line_start":1235,"line_end":1235,"column_start":16,"column_end":26},"name":"into_value","qualname":"<Lazy<T, F>>::into_value","value":"fn into_value(Lazy<T, F>) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `Lazy` returning the stored value.","sig":null,"attributes":[{"value":"/ Consumes this `Lazy` returning the stored value.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41031,"byte_end":41083,"line_start":1232,"line_end":1232,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41092,"byte_end":41095,"line_start":1233,"line_end":1233,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41104,"byte_end":41176,"line_start":1234,"line_end":1234,"column_start":9,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41972,"byte_end":41977,"line_start":1258,"line_end":1258,"column_start":16,"column_end":21},"name":"force","qualname":"<Lazy<T, F>>::force","value":"fn force<'_>(&'_ Lazy<T, F>) -> &'_ T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and\n returns a reference to the result. This is equivalent\n to the `Deref` impl, but is explicit.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41536,"byte_end":41584,"line_start":1245,"line_end":1245,"column_start":9,"column_end":57}},{"value":"/ returns a reference to the result. This is equivalent","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41593,"byte_end":41650,"line_start":1246,"line_end":1246,"column_start":9,"column_end":66}},{"value":"/ to the `Deref` impl, but is explicit.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41659,"byte_end":41700,"line_start":1247,"line_end":1247,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41709,"byte_end":41712,"line_start":1248,"line_end":1248,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41721,"byte_end":41734,"line_start":1249,"line_end":1249,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41743,"byte_end":41750,"line_start":1250,"line_end":1250,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41759,"byte_end":41789,"line_start":1251,"line_end":1251,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41798,"byte_end":41801,"line_start":1252,"line_end":1252,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41810,"byte_end":41842,"line_start":1253,"line_end":1253,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41851,"byte_end":41854,"line_start":1254,"line_end":1254,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force(&lazy), &92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41863,"byte_end":41903,"line_start":1255,"line_end":1255,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41912,"byte_end":41940,"line_start":1256,"line_end":1256,"column_start":9,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41949,"byte_end":41956,"line_start":1257,"line_end":1257,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42634,"byte_end":42643,"line_start":1277,"line_end":1277,"column_start":16,"column_end":25},"name":"force_mut","qualname":"<Lazy<T, F>>::force_mut","value":"fn force_mut<'_>(&'_ mut Lazy<T, F>) -> &'_ mut T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and\n returns a mutable reference to the result. This is equivalent\n to the `Deref` impl, but is explicit.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42211,"byte_end":42259,"line_start":1265,"line_end":1265,"column_start":9,"column_end":57}},{"value":"/ returns a mutable reference to the result. This is equivalent","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42268,"byte_end":42333,"line_start":1266,"line_end":1266,"column_start":9,"column_end":74}},{"value":"/ to the `Deref` impl, but is explicit.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42342,"byte_end":42383,"line_start":1267,"line_end":1267,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42392,"byte_end":42395,"line_start":1268,"line_end":1268,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42404,"byte_end":42417,"line_start":1269,"line_end":1269,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42426,"byte_end":42433,"line_start":1270,"line_end":1270,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42442,"byte_end":42472,"line_start":1271,"line_end":1271,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42481,"byte_end":42484,"line_start":1272,"line_end":1272,"column_start":9,"column_end":12}},{"value":"/ let mut lazy = Lazy::new(|| 92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42493,"byte_end":42529,"line_start":1273,"line_end":1273,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42538,"byte_end":42541,"line_start":1274,"line_end":1274,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force_mut(&mut lazy), &mut 92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42550,"byte_end":42602,"line_start":1275,"line_end":1275,"column_start":9,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42611,"byte_end":42618,"line_start":1276,"line_end":1276,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43235,"byte_end":43238,"line_start":1295,"line_end":1295,"column_start":16,"column_end":19},"name":"get","qualname":"<Lazy<T, F>>::get","value":"fn get<'_>(&'_ Lazy<T, F>) -> Option<&'_ T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the result of this lazy value if\n it was initialized, otherwise returns `None`.","sig":null,"attributes":[{"value":"/ Gets the reference to the result of this lazy value if","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42795,"byte_end":42853,"line_start":1282,"line_end":1282,"column_start":9,"column_end":67}},{"value":"/ it was initialized, otherwise returns `None`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42862,"byte_end":42911,"line_start":1283,"line_end":1283,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42920,"byte_end":42923,"line_start":1284,"line_end":1284,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42932,"byte_end":42945,"line_start":1285,"line_end":1285,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42954,"byte_end":42961,"line_start":1286,"line_end":1286,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":42970,"byte_end":43000,"line_start":1287,"line_end":1287,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43009,"byte_end":43012,"line_start":1288,"line_end":1288,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43021,"byte_end":43053,"line_start":1289,"line_end":1289,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43062,"byte_end":43065,"line_start":1290,"line_end":1290,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::get(&lazy), None);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43074,"byte_end":43113,"line_start":1291,"line_end":1291,"column_start":9,"column_end":48}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43122,"byte_end":43150,"line_start":1292,"line_end":1292,"column_start":9,"column_end":37}},{"value":"/ assert_eq!(Lazy::get(&lazy), Some(&92));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43159,"byte_end":43203,"line_start":1293,"line_end":1293,"column_start":9,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43212,"byte_end":43219,"line_start":1294,"line_end":1294,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43785,"byte_end":43792,"line_start":1312,"line_end":1312,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<Lazy<T, F>>::get_mut","value":"fn get_mut<'_>(&'_ mut Lazy<T, F>) -> Option<&'_ mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the result of this lazy value if\n it was initialized, otherwise returns `None`.","sig":null,"attributes":[{"value":"/ Gets the reference to the result of this lazy value if","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43321,"byte_end":43379,"line_start":1299,"line_end":1299,"column_start":9,"column_end":67}},{"value":"/ it was initialized, otherwise returns `None`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43388,"byte_end":43437,"line_start":1300,"line_end":1300,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43446,"byte_end":43449,"line_start":1301,"line_end":1301,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43458,"byte_end":43471,"line_start":1302,"line_end":1302,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43480,"byte_end":43487,"line_start":1303,"line_end":1303,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43496,"byte_end":43526,"line_start":1304,"line_end":1304,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43535,"byte_end":43538,"line_start":1305,"line_end":1305,"column_start":9,"column_end":12}},{"value":"/ let mut lazy = Lazy::new(|| 92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43547,"byte_end":43583,"line_start":1306,"line_end":1306,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43592,"byte_end":43595,"line_start":1307,"line_end":1307,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::get_mut(&mut lazy), None);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43604,"byte_end":43651,"line_start":1308,"line_end":1308,"column_start":9,"column_end":56}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43660,"byte_end":43688,"line_start":1309,"line_end":1309,"column_start":9,"column_end":37}},{"value":"/ assert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43697,"byte_end":43753,"line_start":1310,"line_end":1310,"column_start":9,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43762,"byte_end":43769,"line_start":1311,"line_end":1311,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43974,"byte_end":43979,"line_start":1319,"line_end":1319,"column_start":12,"column_end":17},"name":"deref","qualname":"<Lazy<T, F> as std::ops::Deref>::deref","value":"fn deref<'_>(&'_ Self) -> &'_ T","parent":{"krate":2,"index":3486},"children":[],"decl_id":{"krate":2,"index":3488},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":44109,"byte_end":44118,"line_start":1325,"line_end":1325,"column_start":12,"column_end":21},"name":"deref_mut","qualname":"<Lazy<T, F> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut<'_>(&'_ mut Self) -> &'_ mut T","parent":{"krate":2,"index":3499},"children":[],"decl_id":{"krate":2,"index":3500},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":44393,"byte_end":44400,"line_start":1333,"line_end":1333,"column_start":12,"column_end":19},"name":"default","qualname":"<Lazy<T> as std::default::Default>::default","value":"fn default() -> Lazy<T>","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":" Creates a new lazy value using `Default` as the initializing function.\n","sig":null,"attributes":[{"value":"/ Creates a new lazy value using `Default` as the initializing function.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":44307,"byte_end":44381,"line_start":1332,"line_end":1332,"column_start":9,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":327},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"race","qualname":"::race","value":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":341},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":352},{"krate":0,"index":365},{"krate":0,"index":368}],"decl_id":null,"docs":" Thread-safe, non-blocking, \"first one wins\" flavor of `OnceCell`.","sig":null,"attributes":[{"value":"cfg(feature = \"race\")","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":44904,"byte_end":44928,"line_start":1356,"line_end":1356,"column_start":1,"column_end":25}},{"value":"/ Thread-safe, non-blocking, \"first one wins\" flavor of `OnceCell`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":58413,"byte_end":58482,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":58483,"byte_end":58486,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ If two threads race to initialize a type from the `race` module, they","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":58487,"byte_end":58560,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ don't block, execute initialization function together, but only one of","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":58561,"byte_end":58635,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"/ them stores the result.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":58636,"byte_end":58663,"line_start":5,"line_end":5,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":58664,"byte_end":58667,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This module does not require `std` feature.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":58668,"byte_end":58715,"line_start":7,"line_end":7,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":58716,"byte_end":58719,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Atomic orderings","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":58720,"byte_end":58742,"line_start":9,"line_end":9,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":58743,"byte_end":58746,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ All types in this module use `Acquire` and `Release`","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":58747,"byte_end":58803,"line_start":11,"line_end":11,"column_start":1,"column_end":57}},{"value":"/ [atomic orderings](Ordering) for all their operations. While this is not","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":58804,"byte_end":58880,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ strictly necessary for types other than `OnceBox`, it is useful for users as","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":58881,"byte_end":58961,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ it allows them to be certain that after `get` or `get_or_init` returns on","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":58962,"byte_end":59039,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ one thread, any side-effects caused by the setter thread prior to them","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":59040,"byte_end":59114,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ calling `set` or `get_or_init` will be made visible to that thread; without","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":59115,"byte_end":59194,"line_start":16,"line_end":16,"column_start":1,"column_end":80}},{"value":"/ it, it's possible for it to appear as if they haven't happened yet from the","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":59195,"byte_end":59274,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ getter thread's perspective. This is an acceptable tradeoff to make since","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":59275,"byte_end":59352,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ `Acquire` and `Release` have very little performance overhead on most","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":59353,"byte_end":59426,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/ architectures versus `Relaxed`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":59427,"byte_end":59462,"line_start":20,"line_end":20,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":424},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":59759,"byte_end":59775,"line_start":32,"line_end":32,"column_start":12,"column_end":28},"name":"OnceNonZeroUsize","qualname":"::race::OnceNonZeroUsize","value":"OnceNonZeroUsize {  }","parent":null,"children":[{"krate":0,"index":425}],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.\n","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":59664,"byte_end":59721,"line_start":30,"line_end":30,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":59894,"byte_end":59897,"line_start":39,"line_end":39,"column_start":18,"column_end":21},"name":"new","qualname":"<OnceNonZeroUsize>::new","value":"const fn new() -> OnceNonZeroUsize","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":59833,"byte_end":59862,"line_start":37,"line_end":37,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":59867,"byte_end":59876,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60045,"byte_end":60048,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"get","qualname":"<OnceNonZeroUsize>::get","value":"fn get<'_>(&'_ Self) -> Option<NonZeroUsize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the underlying value.\n","sig":null,"attributes":[{"value":"/ Gets the underlying value.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":59989,"byte_end":60019,"line_start":43,"line_end":43,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60024,"byte_end":60033,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60343,"byte_end":60346,"line_start":55,"line_end":55,"column_start":12,"column_end":15},"name":"set","qualname":"<OnceNonZeroUsize>::set","value":"fn set<'_>(&'_ Self, NonZeroUsize) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60178,"byte_end":60224,"line_start":50,"line_end":50,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60229,"byte_end":60232,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(())` if it was","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60237,"byte_end":60303,"line_start":52,"line_end":52,"column_start":5,"column_end":71}},{"value":"/ full.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60308,"byte_end":60317,"line_start":53,"line_end":53,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60322,"byte_end":60331,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60907,"byte_end":60918,"line_start":70,"line_end":70,"column_start":12,"column_end":23},"name":"get_or_init","qualname":"<OnceNonZeroUsize>::get_or_init","value":"fn get_or_init<F, '_>(&'_ Self, F) -> NonZeroUsize where F: FnOnce() ->\nNonZeroUsize","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell was\n empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell was","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60618,"byte_end":60693,"line_start":64,"line_end":64,"column_start":5,"column_end":80}},{"value":"/ empty.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60698,"byte_end":60708,"line_start":65,"line_end":65,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60713,"byte_end":60716,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60721,"byte_end":60797,"line_start":67,"line_end":67,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60802,"byte_end":60877,"line_start":68,"line_end":68,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":60882,"byte_end":60895,"line_start":69,"line_end":69,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":61542,"byte_end":61557,"line_start":88,"line_end":88,"column_start":12,"column_end":27},"name":"get_or_try_init","qualname":"<OnceNonZeroUsize>::get_or_try_init","value":"fn get_or_try_init<F, E, '_>(&'_ Self, F) -> Result<NonZeroUsize, E> where\nF: FnOnce() -> Result<NonZeroUsize, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":61185,"byte_end":61247,"line_start":81,"line_end":81,"column_start":5,"column_end":67}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":61252,"byte_end":61316,"line_start":82,"line_end":82,"column_start":5,"column_end":69}},{"value":"/ error is returned.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":61321,"byte_end":61343,"line_start":83,"line_end":83,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":61348,"byte_end":61351,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":61356,"byte_end":61432,"line_start":85,"line_end":85,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":61437,"byte_end":61512,"line_start":86,"line_end":86,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":61517,"byte_end":61530,"line_start":87,"line_end":87,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":430},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62287,"byte_end":62295,"line_start":111,"line_end":111,"column_start":12,"column_end":20},"name":"OnceBool","qualname":"::race::OnceBool","value":"OnceBool {  }","parent":null,"children":[{"krate":0,"index":431}],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.\n","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62192,"byte_end":62249,"line_start":109,"line_end":109,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62411,"byte_end":62414,"line_start":118,"line_end":118,"column_start":18,"column_end":21},"name":"new","qualname":"<OnceBool>::new","value":"const fn new() -> OnceBool","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62350,"byte_end":62379,"line_start":116,"line_end":116,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62384,"byte_end":62393,"line_start":117,"line_end":117,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62550,"byte_end":62553,"line_start":124,"line_end":124,"column_start":12,"column_end":15},"name":"get","qualname":"<OnceBool>::get","value":"fn get<'_>(&'_ Self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Gets the underlying value.\n","sig":null,"attributes":[{"value":"/ Gets the underlying value.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62494,"byte_end":62524,"line_start":122,"line_end":122,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62529,"byte_end":62538,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62806,"byte_end":62809,"line_start":133,"line_end":133,"column_start":12,"column_end":15},"name":"set","qualname":"<OnceBool>::set","value":"fn set<'_>(&'_ Self, bool) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62641,"byte_end":62687,"line_start":128,"line_end":128,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62692,"byte_end":62695,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(())` if it was","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62700,"byte_end":62766,"line_start":130,"line_end":130,"column_start":5,"column_end":71}},{"value":"/ full.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62771,"byte_end":62780,"line_start":131,"line_end":131,"column_start":5,"column_end":14}},{"value":"inline","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62785,"byte_end":62794,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":63200,"byte_end":63211,"line_start":143,"line_end":143,"column_start":12,"column_end":23},"name":"get_or_init","qualname":"<OnceBool>::get_or_init","value":"fn get_or_init<F, '_>(&'_ Self, F) -> bool where F: FnOnce() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell was\n empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell was","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62911,"byte_end":62986,"line_start":137,"line_end":137,"column_start":5,"column_end":80}},{"value":"/ empty.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62991,"byte_end":63001,"line_start":138,"line_end":138,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":63006,"byte_end":63009,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":63014,"byte_end":63090,"line_start":140,"line_end":140,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":63095,"byte_end":63170,"line_start":141,"line_end":141,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":63175,"byte_end":63188,"line_start":142,"line_end":142,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":63730,"byte_end":63745,"line_start":157,"line_end":157,"column_start":12,"column_end":27},"name":"get_or_try_init","qualname":"<OnceBool>::get_or_try_init","value":"fn get_or_try_init<F, E, '_>(&'_ Self, F) -> Result<bool, E> where F: FnOnce()\n-> Result<bool, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":63373,"byte_end":63435,"line_start":150,"line_end":150,"column_start":5,"column_end":67}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":63440,"byte_end":63504,"line_start":151,"line_end":151,"column_start":5,"column_end":69}},{"value":"/ error is returned.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":63509,"byte_end":63531,"line_start":152,"line_end":152,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":63536,"byte_end":63539,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":63544,"byte_end":63620,"line_start":154,"line_end":154,"column_start":5,"column_end":81}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":63625,"byte_end":63700,"line_start":155,"line_end":155,"column_start":5,"column_end":80}},{"value":"/ some `f`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":63705,"byte_end":63718,"line_start":156,"line_end":156,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":386},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":64473,"byte_end":64480,"line_start":185,"line_end":185,"column_start":16,"column_end":23},"name":"OnceBox","qualname":"::race::once_box::OnceBox","value":"OnceBox {  }","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389}],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.\n","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":64400,"byte_end":64457,"line_start":184,"line_end":184,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":64623,"byte_end":64626,"line_start":191,"line_end":191,"column_start":12,"column_end":15},"name":"fmt","qualname":"<OnceBox<T> as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut core::fmt::Formatter)\n-> core::fmt::Result","parent":{"krate":2,"index":10286},"children":[],"decl_id":{"krate":2,"index":10287},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":64831,"byte_end":64838,"line_start":197,"line_end":197,"column_start":12,"column_end":19},"name":"default","qualname":"<OnceBox<T> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":64937,"byte_end":64941,"line_start":203,"line_end":203,"column_start":12,"column_end":16},"name":"drop","qualname":"<OnceBox<T> as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3510},"children":[],"decl_id":{"krate":2,"index":3511},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":65199,"byte_end":65202,"line_start":213,"line_end":213,"column_start":22,"column_end":25},"name":"new","qualname":"<OnceBox<T>>::new","value":"const fn new() -> OnceBox<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":65148,"byte_end":65177,"line_start":212,"line_end":212,"column_start":9,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":65384,"byte_end":65387,"line_start":218,"line_end":218,"column_start":16,"column_end":19},"name":"get","qualname":"<OnceBox<T>>::get","value":"fn get<'_>(&'_ Self) -> Option<&'_ T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying value.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying value.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":65323,"byte_end":65368,"line_start":217,"line_end":217,"column_start":9,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":65767,"byte_end":65770,"line_start":230,"line_end":230,"column_start":16,"column_end":19},"name":"set","qualname":"<OnceBox<T>>::set","value":"fn set<'_>(&'_ Self, Box<T>) -> Result<(), Box<T>>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":65597,"byte_end":65643,"line_start":226,"line_end":226,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":65652,"byte_end":65655,"line_start":227,"line_end":227,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":65664,"byte_end":65733,"line_start":228,"line_end":228,"column_start":9,"column_end":78}},{"value":"/ full.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":65742,"byte_end":65751,"line_start":229,"line_end":229,"column_start":9,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":66553,"byte_end":66564,"line_start":251,"line_end":251,"column_start":16,"column_end":27},"name":"get_or_init","qualname":"<OnceBox<T>>::get_or_init","value":"fn get_or_init<F, '_>(&'_ Self, F) -> &'_ T where F: FnOnce() -> Box<T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell was\n empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell was","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":66240,"byte_end":66315,"line_start":245,"line_end":245,"column_start":9,"column_end":84}},{"value":"/ empty.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":66324,"byte_end":66334,"line_start":246,"line_end":246,"column_start":9,"column_end":19}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":66343,"byte_end":66346,"line_start":247,"line_end":247,"column_start":9,"column_end":12}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":66355,"byte_end":66431,"line_start":248,"line_end":248,"column_start":9,"column_end":85}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":66440,"byte_end":66515,"line_start":249,"line_end":249,"column_start":9,"column_end":84}},{"value":"/ some `f`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":66524,"byte_end":66537,"line_start":250,"line_end":250,"column_start":9,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":67234,"byte_end":67249,"line_start":269,"line_end":269,"column_start":16,"column_end":31},"name":"get_or_try_init","qualname":"<OnceBox<T>>::get_or_try_init","value":"fn get_or_try_init<F, E, '_>(&'_ Self, F) -> Result<&'_ T, E> where\nF: FnOnce() -> Result<Box<T>, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":66849,"byte_end":66911,"line_start":262,"line_end":262,"column_start":9,"column_end":71}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":66920,"byte_end":66984,"line_start":263,"line_end":263,"column_start":9,"column_end":73}},{"value":"/ error is returned.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":66993,"byte_end":67015,"line_start":264,"line_end":264,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":67024,"byte_end":67027,"line_start":265,"line_end":265,"column_start":9,"column_end":12}},{"value":"/ If several threads concurrently run `get_or_init`, more than one `f` can","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":67036,"byte_end":67112,"line_start":266,"line_end":266,"column_start":9,"column_end":85}},{"value":"/ be called. However, all threads will return the same value, produced by","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":67121,"byte_end":67196,"line_start":267,"line_end":267,"column_start":9,"column_end":84}},{"value":"/ some `f`.","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":67205,"byte_end":67218,"line_start":268,"line_end":268,"column_start":9,"column_end":22}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/imp_std.rs","byte_start":46366,"byte_end":46374,"line_start":37,"line_end":37,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/imp_std.rs","byte_start":46411,"byte_end":46419,"line_start":38,"line_end":38,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/imp_std.rs","byte_start":46481,"byte_end":46489,"line_start":40,"line_end":40,"column_start":55,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/imp_std.rs","byte_start":46531,"byte_end":46539,"line_start":41,"line_end":41,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/imp_std.rs","byte_start":46555,"byte_end":46563,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/imp_std.rs","byte_start":50830,"byte_end":50835,"line_start":170,"line_end":170,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12752,"byte_end":12760,"line_start":383,"line_end":383,"column_start":59,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12806,"byte_end":12814,"line_start":384,"line_end":384,"column_start":40,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12846,"byte_end":12854,"line_start":386,"line_end":386,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12971,"byte_end":12979,"line_start":392,"line_end":392,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":13268,"byte_end":13276,"line_start":401,"line_end":401,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":13773,"byte_end":13781,"line_start":417,"line_end":417,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":13910,"byte_end":13918,"line_start":423,"line_end":423,"column_start":24,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":13950,"byte_end":13958,"line_start":425,"line_end":425,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14069,"byte_end":14077,"line_start":431,"line_end":431,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22712,"byte_end":22716,"line_start":679,"line_end":679,"column_start":49,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22802,"byte_end":22806,"line_start":681,"line_end":681,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23001,"byte_end":23005,"line_start":687,"line_end":687,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24060,"byte_end":24064,"line_start":718,"line_end":718,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26542,"byte_end":26546,"line_start":794,"line_end":794,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26702,"byte_end":26706,"line_start":801,"line_end":801,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26906,"byte_end":26910,"line_start":808,"line_end":808,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28475,"byte_end":28483,"line_start":858,"line_end":858,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28611,"byte_end":28619,"line_start":864,"line_end":864,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28908,"byte_end":28916,"line_start":873,"line_end":873,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29392,"byte_end":29400,"line_start":889,"line_end":889,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29532,"byte_end":29540,"line_start":895,"line_end":895,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29676,"byte_end":29684,"line_start":901,"line_end":901,"column_start":24,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29704,"byte_end":29712,"line_start":903,"line_end":903,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":40124,"byte_end":40128,"line_start":1210,"line_end":1210,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":40607,"byte_end":40611,"line_start":1220,"line_end":1220,"column_start":38,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":40733,"byte_end":40737,"line_start":1223,"line_end":1223,"column_start":49,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":40796,"byte_end":40800,"line_start":1225,"line_end":1225,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41515,"byte_end":41519,"line_start":1244,"line_end":1244,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43925,"byte_end":43929,"line_start":1317,"line_end":1317,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":44085,"byte_end":44089,"line_start":1324,"line_end":1324,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":44289,"byte_end":44293,"line_start":1331,"line_end":1331,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":59810,"byte_end":59826,"line_start":36,"line_end":36,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62335,"byte_end":62343,"line_start":115,"line_end":115,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":359},{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":64599,"byte_end":64606,"line_start":190,"line_end":190,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":64807,"byte_end":64814,"line_start":196,"line_end":196,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":64913,"byte_end":64920,"line_start":202,"line_end":202,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":65127,"byte_end":65134,"line_start":211,"line_end":211,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":67999,"byte_end":68006,"line_start":293,"line_end":293,"column_start":42,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":44937,"byte_end":44941,"line_start":1357,"line_end":1357,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":327}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/imp_std.rs","byte_start":46366,"byte_end":46374,"line_start":37,"line_end":37,"column_start":38,"column_end":46},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":416},"to":{"krate":2,"index":3275}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/imp_std.rs","byte_start":46411,"byte_end":46419,"line_start":38,"line_end":38,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":416},"to":{"krate":2,"index":3263}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/imp_std.rs","byte_start":46481,"byte_end":46489,"line_start":40,"line_end":40,"column_start":55,"column_end":63},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":416},"to":{"krate":2,"index":9254}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/imp_std.rs","byte_start":46531,"byte_end":46539,"line_start":41,"line_end":41,"column_start":36,"column_end":44},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":416},"to":{"krate":2,"index":9253}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/imp_std.rs","byte_start":46555,"byte_end":46563,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/imp_std.rs","byte_start":50830,"byte_end":50835,"line_start":170,"line_end":170,"column_start":15,"column_end":20},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":77},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12752,"byte_end":12760,"line_start":383,"line_end":383,"column_start":59,"column_end":67},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":9254}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12806,"byte_end":12814,"line_start":384,"line_end":384,"column_start":40,"column_end":48},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":9253}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12846,"byte_end":12854,"line_start":386,"line_end":386,"column_start":25,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":12971,"byte_end":12979,"line_start":392,"line_end":392,"column_start":40,"column_end":48},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":10286}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":13268,"byte_end":13276,"line_start":401,"line_end":401,"column_start":30,"column_end":38},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":13773,"byte_end":13781,"line_start":417,"line_end":417,"column_start":38,"column_end":46},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":2915}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":13910,"byte_end":13918,"line_start":423,"line_end":423,"column_start":24,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":2920}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":13950,"byte_end":13958,"line_start":425,"line_end":425,"column_start":25,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":129},"to":{"krate":2,"index":3169}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":14069,"byte_end":14077,"line_start":431,"line_end":431,"column_start":13,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22712,"byte_end":22716,"line_start":679,"line_end":679,"column_start":49,"column_end":53},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":171},"to":{"krate":2,"index":9254}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":22802,"byte_end":22806,"line_start":681,"line_end":681,"column_start":43,"column_end":47},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":171},"to":{"krate":2,"index":10286}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":23001,"byte_end":23005,"line_start":687,"line_end":687,"column_start":16,"column_end":20},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":24060,"byte_end":24064,"line_start":718,"line_end":718,"column_start":31,"column_end":35},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26542,"byte_end":26546,"line_start":794,"line_end":794,"column_start":41,"column_end":45},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":171},"to":{"krate":2,"index":3486}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26702,"byte_end":26706,"line_start":801,"line_end":801,"column_start":44,"column_end":48},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":171},"to":{"krate":2,"index":3499}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":26906,"byte_end":26910,"line_start":808,"line_end":808,"column_start":34,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":171},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28475,"byte_end":28483,"line_start":858,"line_end":858,"column_start":25,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":240},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28611,"byte_end":28619,"line_start":864,"line_end":864,"column_start":40,"column_end":48},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":240},"to":{"krate":2,"index":10286}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":28908,"byte_end":28916,"line_start":873,"line_end":873,"column_start":30,"column_end":38},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":240},"to":{"krate":2,"index":2882}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29392,"byte_end":29400,"line_start":889,"line_end":889,"column_start":25,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":240},"to":{"krate":2,"index":3169}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29532,"byte_end":29540,"line_start":895,"line_end":895,"column_start":38,"column_end":46},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":240},"to":{"krate":2,"index":2915}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29676,"byte_end":29684,"line_start":901,"line_end":901,"column_start":24,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":240},"to":{"krate":2,"index":2920}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":29704,"byte_end":29712,"line_start":903,"line_end":903,"column_start":13,"column_end":21},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":40124,"byte_end":40128,"line_start":1210,"line_end":1210,"column_start":43,"column_end":47},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":282},"to":{"krate":2,"index":10286}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":40607,"byte_end":40611,"line_start":1220,"line_end":1220,"column_start":38,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":282},"to":{"krate":2,"index":3275}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":40733,"byte_end":40737,"line_start":1223,"line_end":1223,"column_start":49,"column_end":53},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":282},"to":{"krate":2,"index":9254}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":40796,"byte_end":40800,"line_start":1225,"line_end":1225,"column_start":16,"column_end":20},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":41515,"byte_end":41519,"line_start":1244,"line_end":1244,"column_start":31,"column_end":35},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":43925,"byte_end":43929,"line_start":1317,"line_end":1317,"column_start":41,"column_end":45},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":282},"to":{"krate":2,"index":3486}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":44085,"byte_end":44089,"line_start":1324,"line_end":1324,"column_start":44,"column_end":48},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":282},"to":{"krate":2,"index":3499}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/lib.rs","byte_start":44289,"byte_end":44293,"line_start":1331,"line_end":1331,"column_start":34,"column_end":38},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":282},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":59810,"byte_end":59826,"line_start":36,"line_end":36,"column_start":6,"column_end":22},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":62335,"byte_end":62343,"line_start":115,"line_end":115,"column_start":6,"column_end":14},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":430},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":64599,"byte_end":64606,"line_start":190,"line_end":190,"column_start":34,"column_end":41},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":386},"to":{"krate":2,"index":10286}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":64807,"byte_end":64814,"line_start":196,"line_end":196,"column_start":25,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":386},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":64913,"byte_end":64920,"line_start":202,"line_end":202,"column_start":22,"column_end":29},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":386},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":65127,"byte_end":65134,"line_start":211,"line_end":211,"column_start":13,"column_end":20},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":386},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/c/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.15.0/src/race.rs","byte_start":67999,"byte_end":68006,"line_start":293,"line_end":293,"column_start":42,"column_end":49},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":386},"to":{"krate":2,"index":3275}}]}